{"version":3,"file":"auth.umd.js","sources":["../../src/fetch-token.ts","../../src/ApplicationSession.ts","../../src/generate-token.ts","../../src/federation-utils.ts","../../src/UserSession.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        Date.now() + (response.expires_in * 1000 - 1000)\n      ),\n      ssl: response.ssl === true\n    };\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { fetchToken } from \"./fetch-token\";\n\nexport interface IApplicationSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * ```js\n * import { ApplicationSession } from '@esri/arcgis-rest-auth';\n * const session = new ApplicationSession({\n *   clientId: \"abc123\",\n *   clientSecret: \"sshhhhhh\"\n * })\n * // visit https://developers.arcgis.com to generate your own clientid and secret\n * ```\n * You can use [App Login](/arcgis-rest-js/guides/node/) to access premium content and services in ArcGIS Online.\n *\n */\nexport class ApplicationSession implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n  private duration: number;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationSessionOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // url isnt actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token/`, options).then(\n      response => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      }\n    );\n  }\n\n  public refreshSession() {\n    return this.refreshToken().then(() => this);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  ITokenRequestOptions,\n  NODEJS_DEFAULT_REFERER_HEADER\n} from \"@esri/arcgis-rest-request\";\n\nexport interface IGenerateTokenResponse {\n  token: string;\n  expires: number;\n  ssl: boolean;\n}\n\nexport function generateToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IGenerateTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  /* istanbul ignore else */\n  if (\n    typeof window !== \"undefined\" &&\n    window.location &&\n    window.location.host\n  ) {\n    options.params.referer = window.location.host;\n  } else {\n    options.params.referer = NODEJS_DEFAULT_REFERER_HEADER;\n  }\n\n  return request(url, options);\n}\n","import { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.\\arcgis\\.com\\/sharing\\/rest/;\n\nexport function isOnline(url: string): boolean {\n  return arcgisOnlineUrlRegex.test(url);\n}\n\nexport function normalizeOnlinePortalUrl(portalUrl: string): string {\n  if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n    return portalUrl;\n  }\n\n  switch (getOnlineEnvironment(portalUrl)) {\n    case \"dev\":\n      return \"https://devext.arcgis.com/sharing/rest\";\n    case \"qa\":\n      return \"https://qaext.arcgis.com/sharing/rest\";\n    default:\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n}\n\nexport function getOnlineEnvironment(url: string): string {\n  if (!arcgisOnlineUrlRegex.test(url)) {\n    return null;\n  }\n\n  const match = url.match(arcgisOnlineUrlRegex);\n  const subdomain = match[1].split(\".\").pop();\n\n  if (subdomain.includes(\"dev\")) {\n    return \"dev\";\n  }\n\n  if (subdomain.includes(\"qa\")) {\n    return \"qa\";\n  }\n\n  return \"production\";\n}\n\nexport function isFederated(\n  owningSystemUrl: string,\n  portalUrl: string\n): boolean {\n  const normalizedPortalUrl = cleanUrl(\n    normalizeOnlinePortalUrl(portalUrl)\n  ).replace(/https?:\\/\\//, \"\");\n\n  const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(\n    /https?:\\/\\//,\n    \"\"\n  );\n\n  return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\n\nexport function canUseOnlineToken(\n  portalUrl: string,\n  requestUrl: string\n): boolean {\n  const portalIsOnline = isOnline(portalUrl);\n  const requestIsOnline = isOnline(requestUrl);\n  const portalEnv = getOnlineEnvironment(portalUrl);\n  const requestEnv = getOnlineEnvironment(requestUrl);\n\n  if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n    return true;\n  }\n\n  return false;\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * /generateToken returns a token that cannot be refreshed.\n *\n * oauth2/token can return a token *and* a refreshToken.\n * up until the refreshToken expires, you can use it (and a clientId)\n * to fetch fresh credentials without a username and password.\n *\n * the catch is that this 'authorization_code' flow is only utilized\n * by server based OAuth 2 Node.js applications that call /authorize first.\n */\n\nimport * as http from \"http\";\nimport {\n  request,\n  IRequestOptions,\n  ArcGISAuthError,\n  IAuthenticationManager,\n  ITokenRequestOptions,\n  cleanUrl,\n  encodeQueryString\n} from \"@esri/arcgis-rest-request\";\nimport { IUser } from \"@esri/arcgis-rest-types\";\nimport { generateToken } from \"./generate-token\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils\";\n\n/**\n * Internal utility for resolving a Promise from outside its constructor.\n *\n * See: http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\n */\ninterface IDeferred<T> {\n  promise: Promise<T>;\n  resolve: (v: T) => void;\n  reject: (v: any) => void;\n}\n\nexport type AuthenticationProvider = \"arcgis\" | \"facebook\" | \"google\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\nfunction defer<T>(): IDeferred<T> {\n  const deferred: any = {\n    promise: null,\n    resolve: null,\n    reject: null\n  };\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred as IDeferred<T>;\n}\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/\\S+\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/www\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps)?.\\arcgis\\.com\\/sharing\\/rest/;\n\n/**\n * Options for static OAuth 2.0 helper methods on `UserSession`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration (in minutes) that a token will be valid. Defaults to 20160 (two weeks).\n   */\n  duration?: number;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   *\n   * @nodeOnly\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Applications can specify an opaque value for this parameter to correlate the authorization request sent with the received response. By default, clientId is used.\n   *\n   * @browserOnly\n   */\n  state?: string;\n\n  [key: string]: any;\n}\n\n/**\n * Options for the `UserSession` constructor.\n */\nexport interface IUserSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token from a previous user session.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token from a previous user session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n}\n\n/**\n * ```js\n * import { UserSession } from '@esri/arcgis-rest-auth';\n * UserSession.beginOAuth2({\n *   // register an app of your own to create a unique clientId\n *   clientId: \"abc123\",\n *   redirectUri: 'https://yourapp.com/authenticate.html'\n * })\n *   .then(session)\n * // or\n * new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * // or\n * UserSession.deserialize(cache)\n * ```\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `UserSession` includes helper methods for [OAuth 2.0](/arcgis-rest-js/guides/browser-authentication/) in both browser and server applications.\n */\nexport class UserSession implements IAuthenticationManager {\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the\n   * authentication window will open in a new tab/window otherwise the user will\n   * be redirected to the authorization page in their current tab/window.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  public static beginOAuth2(options: IOAuth2Options, win: any = window) {\n    const {\n      portal,\n      provider,\n      clientId,\n      duration,\n      redirectUri,\n      popup,\n      state,\n      locale,\n      params\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        duration: 20160,\n        popup: true,\n        state: options.clientId,\n        locale: \"\"\n      },\n      ...options\n    };\n    let url: string;\n    if (provider === \"arcgis\") {\n      url = `${portal}/oauth2/authorize?client_id=${clientId}&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    } else {\n      url = `${portal}/oauth2/social/authorize?client_id=${clientId}&socialLoginProviderName=${provider}&autoAccountCreateForSocial=true&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    }\n\n    // append additional params\n    if (params) {\n      url = `${url}&${encodeQueryString(params)}`;\n    }\n\n    if (!popup) {\n      win.location.href = url;\n      return undefined;\n    }\n\n    const session = defer<UserSession>();\n\n    win[`__ESRI_REST_AUTH_HANDLER_${clientId}`] = function(\n      errorString: any,\n      oauthInfoString: string\n    ) {\n      if (errorString) {\n        const error = JSON.parse(errorString);\n        session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n        return;\n      }\n\n      if (oauthInfoString) {\n        const oauthInfo = JSON.parse(oauthInfoString);\n        session.resolve(\n          new UserSession({\n            clientId,\n            portal,\n            ssl: oauthInfo.ssl,\n            token: oauthInfo.token,\n            tokenExpires: new Date(oauthInfo.expires),\n            username: oauthInfo.username\n          })\n        );\n      }\n    };\n\n    win.open(\n      url,\n      \"oauth-window\",\n      \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\"\n    );\n\n    return session.promise;\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0  in. If `options.popup` is `true` the user\n   * will be returned to the previous window. Otherwise a new `UserSession`\n   * will be returned. You must pass the same values for `options.popup` and\n   * `options.portal` as you used in `beginOAuth2()`.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  public static completeOAuth2(options: IOAuth2Options, win: any = window) {\n    const { portal, clientId, popup }: IOAuth2Options = {\n      ...{ portal: \"https://www.arcgis.com/sharing/rest\", popup: true },\n      ...options\n    };\n\n    function completeSignIn(error: any, oauthInfo?: IFetchTokenResponse) {\n      try {\n        let handlerFn;\n        const handlerFnName = `__ESRI_REST_AUTH_HANDLER_${clientId}`;\n\n        if (popup) {\n          // Guard b/c IE does not support window.opener\n          if (win.opener) {\n            if (win.opener.parent && win.opener.parent[handlerFnName]) {\n              handlerFn = win.opener.parent[handlerFnName];\n            } else if (win.opener && win.opener[handlerFnName]) {\n              // support pop-out oauth from within an iframe\n              handlerFn = win.opener[handlerFnName];\n            }\n          } else {\n            // IE\n            if (win !== win.parent && win.parent && win.parent[handlerFnName]) {\n              handlerFn = win.parent[handlerFnName];\n            }\n          }\n          // if we have a handler fn, call it and close the window\n          if (handlerFn) {\n            handlerFn(\n              error ? JSON.stringify(error) : undefined,\n              JSON.stringify(oauthInfo)\n            );\n            win.close();\n            return undefined;\n          }\n        }\n      } catch (e) {\n        throw new ArcGISAuthError(\n          `Unable to complete authentication. It's possible you specified popup based oAuth2 but no handler from \"beginOAuth2()\" present. This generally happens because the \"popup\" option differs between \"beginOAuth2()\" and \"completeOAuth2()\".`\n        );\n      }\n\n      if (error) {\n        throw new ArcGISAuthError(error.errorMessage, error.error);\n      }\n\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username\n      });\n    }\n\n    const match = win.location.href.match(\n      /access_token=(.+)&expires_in=(.+)&username=([^&]+)/\n    );\n\n    if (!match) {\n      const errorMatch = win.location.href.match(\n        /error=(.+)&error_description=(.+)/\n      );\n\n      const error = errorMatch[1];\n      const errorMessage = decodeURIComponent(errorMatch[2]);\n\n      return completeSignIn({ error, errorMessage });\n    }\n\n    const token = match[1];\n    const expires = new Date(\n      Date.now() + parseInt(match[2], 10) * 1000 - 60 * 1000\n    );\n    const username = decodeURIComponent(match[3]);\n    const ssl =\n      win.location.href.indexOf(\"&ssl=true\") > -1 ||\n      win.location.href.indexOf(\"#ssl=true\") > -1;\n\n    return completeSignIn(undefined, {\n      token,\n      expires,\n      ssl,\n      username\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, duration, redirectUri }: IOAuth2Options = {\n      ...{ portal: \"https://arcgis.com/sharing/rest\", duration: 20160 },\n      ...options\n    };\n\n    response.writeHead(301, {\n      Location: `${portal}/oauth2/authorize?client_id=${clientId}&duration=${duration}&response_type=code&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}`\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<UserSession> {\n    const { portal, clientId, redirectUri, refreshTokenTTL }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        refreshTokenTTL: 1440\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    }).then(response => {\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: response.ssl,\n        redirectUri,\n        refreshToken: response.refreshToken,\n        refreshTokenTTL,\n        refreshTokenExpires: new Date(\n          Date.now() + (refreshTokenTTL - 1) * 1000\n        ),\n        token: response.token,\n        tokenExpires: response.expires,\n        username: response.username\n      });\n    });\n  }\n\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new UserSession({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: new Date(options.refreshTokenExpires),\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: new Date(options.tokenExpires),\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      refreshTokenTTL: options.refreshTokenTTL\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * UserSession.fromCredential({\n   *   userId: \"jsmith\",\n   *   token: \"secret\"\n   * });\n   * ```\n   *\n   * @returns UserSession\n   */\n  public static fromCredential(credential: ICredential) {\n    return new UserSession({\n      portal: credential.server.includes(\"sharing/rest\")\n        ? credential.server\n        : credential.server + `/sharing/rest`,\n      ssl: credential.ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(credential.expires)\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user if provided in the `constructor`.\n   */\n  public readonly username: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * Duration of new OAuth 2.0 refresh token validity.\n   */\n  public readonly refreshTokenTTL: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingUserRequest: Promise<IUser>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of trusted 3rd party servers (federated servers) that have\n   *  been validated with `generateToken`.\n   */\n  private trustedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  constructor(options: IUserSessionOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.refreshTokenTTL = options.refreshTokenTTL || 1440;\n\n    this.trustedServers = {};\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.trustedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * esriId.registerToken(session.toCredential());\n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * session.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then(response => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   *    * ```js\n   * session.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else if (this._user) {\n      return Promise.resolve(this._user.username);\n    } else {\n      return this.getUser().then(user => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  public toJSON(): IUserSessionOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      refreshTokenTTL: this.refreshTokenTTL\n    };\n  }\n\n  public serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshSession(\n    requestOptions?: ITokenRequestOptions\n  ): Promise<UserSession> {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this._user = null;\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased becasue in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `trustedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.trustedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = request(`${root}/rest/info`)\n      .then(response => {\n        if (response.owningSystemUrl) {\n          /**\n           * if this server is not owned by this portal\n           * bail out with an error since we know we wont\n           * be able to generate a token\n           */\n          if (!isFederated(response.owningSystemUrl, this.portal)) {\n            throw new ArcGISAuthError(\n              `${url} is not federated with ${this.portal}.`,\n              \"NOT_FEDERATED\"\n            );\n          } else {\n            /**\n             * if the server is federated, use the relevant token endpoint.\n             */\n            return request(\n              `${response.owningSystemUrl}/sharing/rest/info`,\n              requestOptions\n            );\n          }\n        } else if (\n          response.authInfo &&\n          this.trustedServers[root] !== undefined\n        ) {\n          /**\n           * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n           * federation, but the root server url is recognized, use its built in token endpoint.\n           */\n          return Promise.resolve({ authInfo: response.authInfo });\n        } else {\n          throw new ArcGISAuthError(\n            `${url} is not federated with any portal and is not explicitly trusted.`,\n            \"NOT_FEDERATED\"\n          );\n        }\n      })\n      .then((response: any) => {\n        return response.authInfo.tokenServicesUrl;\n      })\n      .then((tokenServicesUrl: string) => {\n        // an expired token cant be used to generate a new token\n        if (this.token && this.tokenExpires.getTime() > Date.now()) {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              token: this.token,\n              serverUrl: url,\n              expiration: this.tokenDuration,\n              client: \"referer\"\n            }\n          });\n          // generate an entirely fresh token if necessary\n        } else {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              username: this.username,\n              password: this.password,\n              expiration: this.tokenDuration,\n              client: \"referer\"\n            }\n          }).then((response: any) => {\n            this._token = response.token;\n            this._tokenExpires = new Date(response.expires);\n            return response;\n          });\n        }\n      })\n      .then(response => {\n        this.trustedServers[root] = {\n          expires: new Date(response.expires),\n          token: response.token\n        };\n        delete this._pendingTokenRequests[root];\n        return response.token;\n      });\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshSession(\n        requestOptions\n      ).then(session => {\n        this._pendingTokenRequests[this.portal] = null;\n        return session.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const options = {\n      params: {\n        username: this.username,\n        password: this.password,\n        expiration: this.tokenDuration\n      },\n      ...requestOptions\n    };\n    return generateToken(`${this.portal}/generateToken`, options).then(\n      (response: any) => {\n        this._token = response.token;\n        this._tokenExpires = new Date(response.expires);\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() < Date.now()\n    ) {\n      return this.refreshRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      return this;\n    });\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  private refreshRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      this._refreshToken = response.refreshToken;\n      this._refreshTokenExpires = new Date(\n        Date.now() + (this.refreshTokenTTL - 1) * 60 * 1000\n      );\n      return this;\n    });\n  }\n}\n"],"names":["request","NODEJS_DEFAULT_REFERER_HEADER","cleanUrl","encodeQueryString","ArcGISAuthError","tslib_1.__assign"],"mappings":"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"}