{"version":3,"file":"request.umd.min.js","sources":["../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../src/utils/encode-form-data.ts","../../src/utils/ArcGISRequestError.ts","../../src/utils/warn.ts","../../src/request.ts","../../src/utils/ErrorTypes.ts","../../src/utils/append-custom-params.ts","../../src/utils/clean-url.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some(key => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach(key => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of objects to be stringified\n        // or an array of non-objects to be comma-separated\n        value =\n          param[0] &&\n          param[0].constructor &&\n          param[0].constructor.name === \"Object\"\n            ? JSON.stringify(param)\n            : param.join(\",\");\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\") {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params\";\n\nexport function encodeParam(key: string, value: any) {\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params\";\nimport { encodeQueryString } from \"./encode-query-string\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions\";\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISRequestError {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\nArcGISRequestError.prototype = Object.create(Error.prototype);\nArcGISRequestError.prototype.constructor = ArcGISRequestError;\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data\";\nimport { encodeQueryString } from \"./utils/encode-query-string\";\nimport { requiresFormData } from \"./utils/process-params\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError\";\nimport { IRequestOptions } from \"./utils/IRequestOptions\";\nimport { IParams } from \"./utils/IParams\";\nimport { warn } from \"./utils/warn\";\nimport { IRetryAuthError } from \"./utils/retryAuthError\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\nlet DEFAULT_ARCGIS_REQUEST_OPTIONS: IRequestOptions = {\n  httpMethod: \"POST\",\n  params: {\n    f: \"json\"\n  }\n};\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n * setDefaultRequestOptions({\n *   authentication: userSession // all requests will use this session by default\n * })\n * ```\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: typeof DEFAULT_ARCGIS_REQUEST_OPTIONS,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 3) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      getSession(this.url, this.options)\n        .then(session => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          tries = tries + 1;\n          return request(this.url, newOptions);\n        })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (\n      code === 498 ||\n      code === 499 ||\n      messageCode === \"GWM_0003\" ||\n      (code === 400 && message === \"Unable to generate token.\")\n    ) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code: string = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n * //\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n * //\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n * //\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...DEFAULT_ARCGIS_REQUEST_OPTIONS,\n    ...requestOptions,\n    ...{\n      params: {\n        ...DEFAULT_ARCGIS_REQUEST_OPTIONS.params,\n        ...requestOptions.params\n      },\n      headers: {\n        ...DEFAULT_ARCGIS_REQUEST_OPTIONS.headers,\n        ...requestOptions.headers\n      }\n    }\n  };\n\n  const missingGlobals: string[] = [];\n  const recommendedPackages: string[] = [];\n\n  // don't check for a global fetch if a custom implementation was passed through\n  if (!options.fetch && typeof fetch !== \"undefined\") {\n    options.fetch = fetch.bind(Function(\"return this\")());\n  } else {\n    missingGlobals.push(\"`fetch`\");\n    recommendedPackages.push(\"`node-fetch`\");\n  }\n\n  if (typeof Promise === \"undefined\") {\n    missingGlobals.push(\"`Promise`\");\n    recommendedPackages.push(\"`es6-promise`\");\n  }\n\n  if (typeof FormData === \"undefined\") {\n    missingGlobals.push(\"`FormData`\");\n    recommendedPackages.push(\"`isomorphic-form-data`\");\n  }\n\n  if (\n    !options.fetch ||\n    typeof Promise === \"undefined\" ||\n    typeof FormData === \"undefined\"\n  ) {\n    throw new Error(\n      `\\`arcgis-rest-request\\` requires a \\`fetch\\` implementation and global variables for \\`Promise\\` and \\`FormData\\` to be present in the global scope. You are missing ${missingGlobals.join(\n        \", \"\n      )}. We recommend installing the ${recommendedPackages.join(\n        \", \"\n      )} modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.`\n    );\n  }\n\n  const { httpMethod, authentication, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: \"same-origin\"\n  };\n\n  return (authentication\n    ? authentication.getToken(url, { fetch: options.fetch }).catch(err => {\n        /**\n         * append original request url and requestOptions\n         * to the error thrown by getToken()\n         * to assist with retrying\n         */\n        err.url = url;\n        err.options = options;\n        /**\n         * if an attempt is made to talk to an unfederated server\n         * first try the request anonymously. if a 'token required'\n         * error is thrown, throw the UNFEDERATED error then.\n         */\n        originalAuthError = err;\n        return Promise.resolve(\"\");\n      })\n    : Promise.resolve(\"\")\n  )\n    .then(token => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n      \n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (params.token && options.hideToken && \n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === 'undefined') {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs specified by the consumer and requires POST\n          (options.maxUrlLength &&\n          urlWithQueryString.length > options.maxUrlLength) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData);\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers\n      };\n\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      return options.fetch(url, fetchOptions);\n    })\n    .then(response => {\n      if (!response.ok) {\n        // server responded w/ an actual error (404, 500, etc)\n        const { status, statusText } = response;\n        throw new ArcGISRequestError(\n          statusText,\n          `HTTP ${status}`,\n          response,\n          url,\n          options\n        );\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then(data => {\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          url,\n          params,\n          options,\n          originalAuthError\n        );\n        if (originalAuthError) {\n          /* if the request was made to an unfederated service that\n          didnt require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n          (options.authentication as any).trustedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000)\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\"\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"portal\",\n    \"fetch\",\n    \"maxUrlLength\",\n    \"headers\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (customOptions[key] || typeof customOptions[key] === \"boolean\") {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce(\n    (value, key) => {\n      if ((options as any)[key]) {\n        (value as any)[key] = (options as any)[key];\n      }\n      return value;\n    },\n    {} as IRequestOptions\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n"],"names":["requiresFormData","params","Object","keys","some","key","value","toParam","constructor","name","processParams","newParams","forEach","param","JSON","stringify","join","valueOf","encodeParam","encodeURIComponent","encodeQueryString","map","encodeFormData","forceFormData","useFormData","formData_1","FormData","Blob","filename","append","message","code","response","url","options","this","originalMessage","warn","console","apply","ArcGISRequestError","prototype","create","Error","NODEJS_DEFAULT_REFERER_HEADER","DEFAULT_ARCGIS_REQUEST_OPTIONS","httpMethod","f","ErrorTypes","ArcGISAuthError","getSession","retryLimit","tries","retryRequest","resolve","reject","_this","then","session","newOptions","authentication","request","catch","e","Promise","_super","checkForErrors","originalAuthError","error","_a","messageCode","errorCode","status","parse","statusMessage","requestOptions","headers","missingGlobals","recommendedPackages","fetch","push","bind","Function","rawResponse","fetchOptions","method","credentials","getToken","err","token","length","requestHeaders","hideToken","window","urlWithQueryString","maxUrlLength","RegExp","test","body","referer","ok","status_1","statusText","json","text","blob","data","truncatedUrl","toLowerCase","split","trustedServers","expires","Date","now","customOptions","baseOptions","reduce","trim","slice","hideWarnings"],"mappings":"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"}