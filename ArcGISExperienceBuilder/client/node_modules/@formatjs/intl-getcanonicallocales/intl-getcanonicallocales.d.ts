
export declare function emitUnicodeLanguageId(lang?: UnicodeLanguageId): string;

export declare function emitUnicodeLocaleId({ lang, extensions, }: UnicodeLocaleId): string;

export declare interface Extension {
    type: string;
}

export declare function getCanonicalLocales(locales?: string[] | string): string[];

export declare function isStructurallyValidLanguageTag(tag: string): boolean;

export declare function isUnicodeLanguageSubtag(lang: string): boolean;

export declare function isUnicodeRegionSubtag(region: string): boolean;

export declare function isUnicodeScriptSubtag(script: string): boolean;

export declare type KV = [string, string] | [string];

export declare interface OtherExtension extends Extension {
    type: 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 'v' | 'w' | 'y' | 'z';
    value: string;
}

export declare function parseUnicodeLanguageId(chunks: string[] | string): UnicodeLanguageId;

export declare function parseUnicodeLocaleId(locale: string): UnicodeLocaleId;

export declare interface PuExtension extends Extension {
    type: 'x';
    value: string;
}

export declare interface TransformedExtension extends Extension {
    type: 't';
    fields: KV[];
    lang?: UnicodeLanguageId;
}

export declare interface UnicodeExtension extends Extension {
    type: 'u';
    keywords: KV[];
    attributes: string[];
}

export declare interface UnicodeLanguageId {
    lang: string;
    script?: string;
    region?: string;
    variants: string[];
}

export declare interface UnicodeLocaleId {
    lang: UnicodeLanguageId;
    extensions: Array<UnicodeExtension | TransformedExtension | PuExtension | OtherExtension>;
}

export { }
