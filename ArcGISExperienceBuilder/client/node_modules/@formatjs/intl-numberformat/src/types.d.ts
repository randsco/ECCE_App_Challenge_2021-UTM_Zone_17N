import { NumberFormatDigitOptions, NumberFormatDigitInternalSlots, NumberFormatNotation, NumberFormatLocaleInternalData, RawNumberLocaleData } from '@formatjs/intl-utils';
export interface NumberFormat {
    resolvedOptions(): ResolvedNumberFormatOptions;
    formatToParts(x: number): NumberFormatPart[];
    format(x: number): string;
}
export interface NumberFormatConstructor {
    new (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
    (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
    __addLocaleData(...data: RawNumberLocaleData[]): void;
    supportedLocalesOf(locales: string | string[], options?: Pick<NumberFormatOptions, 'localeMatcher'>): string[];
    getDefaultLocale(): string;
    __defaultLocale: string;
    localeData: Record<string, NumberFormatLocaleInternalData>;
    availableLocales: string[];
    polyfilled: boolean;
}
export declare type NumberFormatOptionsLocaleMatcher = 'lookup' | 'best fit';
export declare type NumberFormatOptionsStyle = 'decimal' | 'percent' | 'currency' | 'unit';
export declare type NumberFormatOptionsCompactDisplay = 'short' | 'long';
export declare type NumberFormatOptionsCurrencyDisplay = 'symbol' | 'code' | 'name' | 'narrowSymbol';
export declare type NumberFormatOptionsCurrencySign = 'standard' | 'accounting';
export declare type NumberFormatOptionsNotation = NumberFormatNotation;
export declare type NumberFormatOptionsSignDisplay = 'auto' | 'always' | 'never' | 'exceptZero';
export declare type NumberFormatOptionsUnitDisplay = 'long' | 'short' | 'narrow';
export declare type NumberFormatOptions = Intl.NumberFormatOptions & NumberFormatDigitOptions & {
    localeMatcher?: NumberFormatOptionsLocaleMatcher;
    style?: NumberFormatOptionsStyle;
    compactDisplay?: NumberFormatOptionsCompactDisplay;
    currencyDisplay?: NumberFormatOptionsCurrencyDisplay;
    currencySign?: NumberFormatOptionsCurrencySign;
    notation?: NumberFormatOptionsNotation;
    signDisplay?: NumberFormatOptionsSignDisplay;
    unit?: string;
    unitDisplay?: NumberFormatOptionsUnitDisplay;
    numberingSystem?: string;
};
export declare type ResolvedNumberFormatOptions = Intl.ResolvedNumberFormatOptions & Pick<NumberFormatInternal, 'currencySign' | 'unit' | 'unitDisplay' | 'notation' | 'compactDisplay' | 'signDisplay'>;
export declare type NumberFormatPartTypes = Intl.NumberFormatPartTypes | 'exponentSeparator' | 'exponentMinusSign' | 'exponentInteger' | 'compact' | 'unit' | 'literal';
export interface NumberFormatPart {
    type: NumberFormatPartTypes;
    value: string;
}
export interface NumberFormatInternal extends NumberFormatDigitInternalSlots {
    locale: string;
    dataLocale: string;
    style: NumberFormatOptionsStyle;
    currency?: string;
    currencyDisplay: NumberFormatOptionsCurrencyDisplay;
    unit?: string;
    unitDisplay: NumberFormatOptionsUnitDisplay;
    currencySign: NumberFormatOptionsCurrencySign;
    notation: NumberFormatOptionsNotation;
    compactDisplay: NumberFormatOptionsCompactDisplay;
    signDisplay: NumberFormatOptionsSignDisplay;
    useGrouping: boolean;
    pl: Intl.PluralRules;
    boundFormat?: Intl.NumberFormat['format'];
    numberingSystem: string;
    dataLocaleData: NumberFormatLocaleInternalData;
}
//# sourceMappingURL=types.d.ts.map