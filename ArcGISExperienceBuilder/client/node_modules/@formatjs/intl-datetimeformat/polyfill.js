"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var intl_utils_1 = require("@formatjs/intl-utils");
var to_locale_string_1 = require("./src/to_locale_string");
function supportsDateStyle() {
    return !!new Intl.DateTimeFormat(undefined, {
        dateStyle: 'short',
    }).resolvedOptions().dateStyle;
}
/**
 * https://bugs.chromium.org/p/chromium/issues/detail?id=865351
 */
function hasChromeLt71Bug() {
    return (new Intl.DateTimeFormat('en', {
        hourCycle: 'h11',
        hour: 'numeric',
    }).formatToParts(0)[2].type !== 'dayPeriod');
}
if (!('DateTimeFormat' in Intl) ||
    !('formatToParts' in Intl.DateTimeFormat.prototype) ||
    hasChromeLt71Bug() ||
    !supportsDateStyle()) {
    intl_utils_1.defineProperty(Intl, 'DateTimeFormat', { value: _1.DateTimeFormat });
    intl_utils_1.defineProperty(Date.prototype, 'toLocaleString', {
        value: function toLocaleString(locales, options) {
            return to_locale_string_1.toLocaleString(this, locales, options);
        },
    });
    // defineProperty(Date.prototype, 'toLocaleDateString', {
    //   value: function toLocaleDateString(
    //     locales?: string | string[],
    //     options?: DateTimeFormatOptions
    //   ) {
    //     return _toLocaleDateString(this, locales, options);
    //   },
    // });
    intl_utils_1.defineProperty(Date.prototype, 'toLocaleTimeString', {
        value: function toLocaleTimeString(locales, options) {
            return to_locale_string_1.toLocaleTimeString(this, locales, options);
        },
    });
}
