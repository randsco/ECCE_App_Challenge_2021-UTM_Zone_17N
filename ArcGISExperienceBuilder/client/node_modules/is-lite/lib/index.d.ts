declare type Class<T = unknown> = new (...args: any[]) => T;
interface IPlainObject {
    [key: string]: unknown;
}
declare const enum Types {
    array = "Array",
    asyncFunction = "AsyncFunction",
    bigint = "bigint",
    boolean = "boolean",
    date = "Date",
    error = "Error",
    function = "Function",
    generator = "Generator",
    generatorFunction = "GeneratorFunction",
    iterable = "Iterable",
    map = "Map",
    null = "null",
    number = "number",
    object = "Object",
    promise = "Promise",
    regExp = "RegExp",
    set = "Set",
    string = "string",
    symbol = "symbol",
    undefined = "undefined",
    weakMap = "WeakMap",
    weakSet = "WeakSet"
}
export declare const getObjectType: (value: unknown) => string;
declare const is: {
    (value: unknown): Types;
    array: (arg: any) => arg is any[];
    arrayOf(target: unknown[], predicate: (v: unknown) => boolean): boolean;
    asyncFunction: (value: unknown) => value is Function;
    boolean(value: unknown): value is boolean;
    date: (value: unknown) => value is Date;
    defined(value: unknown): boolean;
    domElement(value: unknown): value is Element;
    empty(value: unknown): boolean;
    error: (value: unknown) => value is Error;
    function: (value: unknown) => value is Function;
    generator(value: unknown): value is Generator<unknown, any, unknown>;
    generatorFunction: (value: unknown) => value is GeneratorFunction;
    instanceOf<T>(instance: unknown, class_: Class<T>): instance is T;
    iterable(value: unknown): value is IterableIterator<unknown>;
    map: (value: unknown) => value is Map<unknown, unknown>;
    nan(value: unknown): boolean;
    null(value: unknown): value is null;
    nullOrUndefined(value: unknown): value is null | undefined;
    number(value: unknown): value is number;
    numericString(value: unknown): value is string;
    object(value: unknown): value is object;
    oneOf(target: unknown[], value: any): boolean;
    plainObject(value: unknown): value is IPlainObject;
    promise: (value: unknown) => value is Promise<unknown>;
    propertyOf(target: object, key: string, predicate?: ((v: unknown) => boolean) | undefined): boolean;
    regexp: (value: unknown) => value is RegExp;
    set: (value: unknown) => value is Set<object>;
    string: (value: unknown) => value is string;
    symbol: (value: unknown) => value is symbol;
    undefined: (value: unknown) => value is undefined;
    weakMap: (value: unknown) => value is WeakMap<object, unknown>;
    weakSet: (value: unknown) => value is WeakSet<object>;
};
export default is;
