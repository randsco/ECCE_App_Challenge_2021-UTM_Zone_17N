{"version":3,"file":"feature-layer.umd.min.js","sources":["../../src/getLayer.ts","../../src/decodeValues.ts","../../src/addAttachment.ts","../../src/add.ts","../../src/applyEdits.ts","../../src/deleteAttachments.ts","../../src/delete.ts","../../src/getAttachments.ts","../../src/query.ts","../../src/getService.ts","../../src/queryRelated.ts","../../src/updateAttachment.ts","../../src/update.ts"],"sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { ILayerDefinition } from \"@esri/arcgis-rest-types\";\nimport { IGetLayerOptions } from \"./helpers\";\n\n/**\n * ```js\n * import { getLayer } from '@esri/arcgis-rest-feature-layer';\n * //\n * getLayer({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n * Layer (Feature Service) request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm) for more information.\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function getLayer(options: IGetLayerOptions): Promise<ILayerDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IField, IFeature, ILayerDefinition } from \"@esri/arcgis-rest-types\";\n\nimport { IQueryFeaturesResponse } from \"./query\";\nimport { getLayer } from \"./getLayer\";\n\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IDecodeValuesOptions extends IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url?: string;\n  /**\n   * Unique identifier of the feature.\n   */\n  queryResponse: IQueryFeaturesResponse;\n  /**\n   * * If a fieldset is provided, no internal metadata check will be issued to gather info about coded value domains.\n   *\n   * getFeatureService(url)\n   *   .then(metadata => {\n   *     queryFeatures({ url })\n   *       .then(response => {\n   *         decodeValues({\n   *           url,\n   *           queryResponse,\n   *           fields: metadata.fields\n   *         })\n   *           .then(decodedResponse)\n   *       })\n   *   })\n   */\n  fields?: IField[];\n}\n\n/**\n * ```js\n * import { queryFeatures, decodeValues } from '@esri/arcgis-rest-feature-layer';\n * //\n * const url = `https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0`\n * queryFeatures({ url })\n *   .then(queryResponse => {\n *     decodeValues({\n *       url,\n *       queryResponse\n *     })\n *       .then(decodedResponse)\n *   })\n * ```\n * Replaces the raw coded domain values in a query response with descriptions (for legibility).\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function decodeValues(\n  requestOptions: IDecodeValuesOptions\n): Promise<IQueryFeaturesResponse> {\n  return new Promise(resolve => {\n    if (!requestOptions.fields) {\n      return getLayer({ url: requestOptions.url }).then(\n        (metadata: ILayerDefinition) => {\n          resolve((requestOptions.fields = metadata.fields));\n        }\n      );\n    } else {\n      resolve(requestOptions.fields);\n    }\n  }).then(fields => {\n    // extract coded value domains\n    const domains = extractCodedValueDomains(fields as IField[]);\n    if (Object.keys(domains).length < 1) {\n      // no values to decode\n      return requestOptions.queryResponse;\n    }\n\n    // don't mutate original features\n    const decodedFeatures = requestOptions.queryResponse.features.map(\n      (feature: IFeature) => {\n        const decodedAttributes: { [index: string]: any } = {};\n        for (const key in feature.attributes) {\n          /* istanbul ignore next */\n          if (!feature.attributes.hasOwnProperty(key)) continue;\n          const value = feature.attributes[key];\n          const domain = domains[key];\n          decodedAttributes[key] =\n            value !== null && domain ? decodeValue(value, domain) : value;\n        }\n        // merge decoded attributes into the feature\n        return { ...feature, ...{ attributes: decodedAttributes } };\n      }\n    );\n    // merge decoded features into the response\n    return {\n      ...requestOptions.queryResponse,\n      ...{ features: decodedFeatures }\n    };\n  });\n}\n\nfunction extractCodedValueDomains(fields: IField[]) {\n  return fields.reduce(\n    (domains, field) => {\n      const domain = field.domain;\n      if (domain && domain.type === \"codedValue\") {\n        domains[field.name] = domain;\n      }\n      return domains;\n    },\n    {} as { [index: string]: any }\n  );\n}\n\n// TODO: add type for domain?\nfunction decodeValue(value: any, domain: any) {\n  const codedValue = domain.codedValues.find((d: any) => {\n    return value === d.code;\n  });\n  return codedValue ? codedValue.name : value;\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options for adding a related attachment to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n */\nexport interface IAddAttachmentOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to add related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be attached.\n   */\n  attachment: File;\n}\n\n/**\n * ```js\n * import { addAttachment } from '@esri/arcgis-rest-feature-layer';\n * //\n * addAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0]\n * })\n *   .then(response)\n * ```\n * Attach a file to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `addAttachment()` response.\n */\nexport function addAttachment(\n  requestOptions: IAddAttachmentOptions\n): Promise<{ addAttachmentResult: IEditFeatureResult }> {\n  const options: IAddAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/addAttachment`,\n    options\n  );\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport { IFeature } from \"@esri/arcgis-rest-types\";\n\nimport { ISharedEditOptions, IEditFeatureResult } from \"./helpers\";\n\n/**\n * Add features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n */\nexport interface IAddFeaturesOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to add.\n   */\n  features: IFeature[];\n}\n\n/**\n * ```js\n * import { addFeatures } from '@esri/arcgis-rest-feature-layer';\n * //\n * addFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   features: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * })\n *   .then(response)\n * ```\n * Add features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function addFeatures(\n  requestOptions: IAddFeaturesOptions\n): Promise<{ addResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/addFeatures`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IAddFeaturesOptions>(\n    requestOptions,\n    [\"features\", \"gdbVersion\", \"returnEditMoment\", \"rollbackOnFailure\"],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport { IFeature } from \"@esri/arcgis-rest-types\";\n\nimport { ISharedEditOptions, IApplyEditsResult } from \"./helpers\";\n\n/**\n * Apply edits request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) for more information.\n *\n */\nexport interface IApplyEditsOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to add.\n   */\n  adds?: IFeature[];\n  /**\n   * Array of JSON features to update.\n   */\n  updates?: IFeature[];\n  /**\n   * Array of objectIds or globalIds to delete.\n   */\n  deletes?: number[] | string[];\n  /**\n   * When set to true, the features and attachments in the adds, updates, deletes, and attachments parameters are identified by their globalIds.\n   */\n  useGlobalIds?: boolean;\n  /**\n   * Use the attachments parameter to add, update or delete attachments. Applies only when the useGlobalIds parameter is set to true.\n   * See [attachment](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) param details.\n   */\n  attachments?: {\n    adds?: any[];\n    updates?: any[];\n    deletes?: string[];\n  };\n}\n\n/**\n * ```js\n * import { applyEdits } from '@esri/arcgis-rest-feature-layer';\n * //\n * applyEdits({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   adds: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }],\n *   updates: [{\n *     attributes: { OBJECTID: 1004, status: \"alive\" }\n *   }],\n *   deletes: [862, 1548]\n * })\n *   .then(response)\n * ```\n * Apply edits request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the applyEdits response.\n */\nexport function applyEdits(\n  requestOptions: IApplyEditsOptions\n): Promise<IApplyEditsResult> {\n  const url = `${cleanUrl(requestOptions.url)}/applyEdits`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IApplyEditsOptions>(\n    requestOptions,\n    [\n      \"adds\",\n      \"updates\",\n      \"deletes\",\n      \"useGlobalIds\",\n      \"attachments\",\n      \"gdbVersion\",\n      \"returnEditMoment\",\n      \"rollbackOnFailure\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options to for deleting related attachments of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n */\nexport interface IDeleteAttachmentsOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to delete related attachment(s).\n   */\n  featureId: number;\n  /**\n   * Array of unique identifiers of attachments to delete.\n   */\n  attachmentIds: number[];\n}\n\n/**\n * ```js\n * import { deleteAttachments } from '@esri/arcgis-rest-feature-layer';\n * //\n * deleteAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachmentIds: [306]\n * });\n * ```\n * Delete existing attachment files of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `deleteAttachments()` response.\n */\nexport function deleteAttachments(\n  requestOptions: IDeleteAttachmentsOptions\n): Promise<{ deleteAttachmentResults: IEditFeatureResult[] }> {\n  const options: IDeleteAttachmentsOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachmentIds` --> params: {}\n  options.params.attachmentIds = requestOptions.attachmentIds;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/deleteAttachments`,\n    options\n  );\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\nimport {\n  ISharedEditOptions,\n  IEditFeatureResult,\n  ISharedQueryOptions\n} from \"./helpers\";\n\n/**\n * Delete features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n */\nexport interface IDeleteFeaturesOptions\n  extends ISharedEditOptions,\n    ISharedQueryOptions {\n  /**\n   * Array of objectIds to delete.\n   */\n  objectIds: number[];\n}\n\n/**\n * ```js\n * import { deleteFeatures } from '@esri/arcgis-rest-feature-layer';\n * //\n * deleteFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   objectIds: [1,2,3]\n * });\n * ```\n * Delete features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n * @param deleteFeaturesRequestOptions - Options for the request.\n * @returns A Promise that will resolve with the deleteFeatures response.\n */\nexport function deleteFeatures(\n  requestOptions: IDeleteFeaturesOptions\n): Promise<{ deleteResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/deleteFeatures`;\n\n  // edit operations POST only\n  const options = appendCustomParams<IDeleteFeaturesOptions>(\n    requestOptions,\n    [\n      \"where\",\n      \"objectIds\",\n      \"gdbVersion\",\n      \"returnEditMoment\",\n      \"rollbackOnFailure\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions } from \"./helpers\";\n\n/**\n * Request options to fetch `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n */\nexport interface IGetAttachmentsOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to request related `attachmentInfos`.\n   */\n  featureId: number;\n}\n\n/**\n * Attachment, a.k.a. `attachmentInfo`. See [Attachment](https://developers.arcgis.com/rest/services-reference/attachment-feature-service-.htm) for more information.\n */\nexport interface IAttachmentInfo {\n  id: number;\n  contentType: string;\n  size: number;\n  name: string;\n}\n\n/**\n * ```js\n * import { getAttachments } from '@esri/arcgis-rest-feature-layer';\n * //\n * getAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484\n * });\n * ```\n * Request `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `getAttachments()` response.\n */\nexport function getAttachments(\n  requestOptions: IGetAttachmentsOptions\n): Promise<{ attachmentInfos: IAttachmentInfo[] }> {\n  const options: IGetAttachmentsOptions = {\n    httpMethod: \"GET\",\n    ...requestOptions\n  };\n\n  // pass through\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/attachments`,\n    options\n  );\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ISpatialReference,\n  IFeatureSet,\n  IFeature,\n  Units,\n  IExtent,\n  IStatisticDefinition\n} from \"@esri/arcgis-rest-types\";\n\nimport { IGetLayerOptions, ISharedQueryOptions } from \"./helpers\";\n\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IGetFeatureOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of the feature.\n   */\n  id: number;\n}\n\n/**\n * feature query request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n */\nexport interface IQueryFeaturesOptions extends ISharedQueryOptions {\n  objectIds?: number[];\n  relationParam?: string;\n  // NOTE: either time=1199145600000 or time=1199145600000, 1230768000000\n  time?: number | number[];\n  distance?: number;\n  units?: Units;\n  /**\n   * Attribute fields to include in the response. Defaults to \"*\"\n   */\n  outFields?: \"*\" | string[];\n  returnGeometry?: boolean;\n  maxAllowableOffset?: number;\n  geometryPrecision?: number;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  outSR?: string | ISpatialReference;\n  gdbVersion?: string;\n  returnDistinctValues?: boolean;\n  returnIdsOnly?: boolean;\n  returnCountOnly?: boolean;\n  returnExtentOnly?: boolean;\n  orderByFields?: string;\n  groupByFieldsForStatistics?: string;\n  outStatistics?: IStatisticDefinition[];\n  returnZ?: boolean;\n  returnM?: boolean;\n  multipatchOption?: \"xyFootprint\";\n  resultOffset?: number;\n  resultRecordCount?: number;\n  // TODO: IQuantizationParameters?\n  quantizationParameters?: any;\n  returnCentroid?: boolean;\n  resultType?: \"none\" | \"standard\" | \"tile\";\n  // to do: convert from Date() to epoch time internally\n  historicMoment?: number;\n  returnTrueCurves?: false;\n  sqlFormat?: \"none\" | \"standard\" | \"native\";\n  returnExceededLimitFeatures?: boolean;\n  /**\n   * Response format. Defaults to \"json\"\n   * NOTE: for \"pbf\" you must also supply `rawResponse: true`\n   * and parse the response yourself using `response.arrayBuffer()`\n   */\n  f?: \"json\" | \"geojson\" | \"pbf\";\n  /**\n   * someday...\n   *\n   * If 'true' the query will be preceded by a metadata check to gather info about coded value domains and result values will be decoded. If a fieldset is provided it will be used to decode values and no internal metadata request will be issued.\n   */\n  // decodeValues?: boolean | IField[];\n}\n\nexport interface IQueryFeaturesResponse extends IFeatureSet {\n  exceededTransferLimit?: boolean;\n}\n\nexport interface IQueryResponse {\n  count?: number;\n  extent?: IExtent;\n  objectIdFieldName?: string;\n  objectIds?: number[];\n}\n\n/**\n * ```js\n * import { getFeature } from '@esri/arcgis-rest-feature-layer';\n * //\n * const url = \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0\";\n * //\n * getFeature({\n *   url,\n *   id: 42\n * }).then(feature => {\n *  console.log(feature.attributes.FID); // 42\n * });\n * ```\n * Get a feature by id.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the feature or the [response](https://developer.mozilla.org/en-US/docs/Web/API/Response) itself if `rawResponse: true` was passed in.\n */\nexport function getFeature(\n  requestOptions: IGetFeatureOptions\n): Promise<IFeature> {\n  const url = `${cleanUrl(requestOptions.url)}/${requestOptions.id}`;\n\n  // default to a GET request\n  const options: IGetFeatureOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options).then((response: any) => {\n    if (options.rawResponse) {\n      return response;\n    }\n    return response.feature;\n  });\n}\n\n/**\n * ```js\n * import { queryFeatures } from '@esri/arcgis-rest-feature-layer';\n * //\n * queryFeatures({\n *   url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n *   where: \"STATE_NAME = 'Alaska'\"\n * })\n *   .then(result)\n * ```\n * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport function queryFeatures(\n  requestOptions: IQueryFeaturesOptions\n): Promise<IQueryFeaturesResponse | IQueryResponse> {\n  const queryOptions = appendCustomParams<IQueryFeaturesOptions>(\n    requestOptions,\n    [\n      \"where\",\n      \"objectIds\",\n      \"relationParam\",\n      \"time\",\n      \"distance\",\n      \"units\",\n      \"outFields\",\n      \"geometry\",\n      \"geometryType\",\n      \"spatialRel\",\n      \"returnGeometry\",\n      \"maxAllowableOffset\",\n      \"geometryPrecision\",\n      \"inSR\",\n      \"outSR\",\n      \"gdbVersion\",\n      \"returnDistinctValues\",\n      \"returnIdsOnly\",\n      \"returnCountOnly\",\n      \"returnExtentOnly\",\n      \"orderByFields\",\n      \"groupByFieldsForStatistics\",\n      \"outStatistics\",\n      \"returnZ\",\n      \"returnM\",\n      \"multipatchOption\",\n      \"resultOffset\",\n      \"resultRecordCount\",\n      \"quantizationParameters\",\n      \"returnCentroid\",\n      \"resultType\",\n      \"historicMoment\",\n      \"returnTrueCurves\",\n      \"sqlFormat\",\n      \"returnExceededLimitFeatures\",\n      \"f\"\n    ],\n    {\n      httpMethod: \"GET\",\n      params: {\n        // set default query parameters\n        where: \"1=1\",\n        outFields: \"*\",\n        ...requestOptions.params\n      }\n    }\n  );\n\n  return request(`${cleanUrl(requestOptions.url)}/query`, queryOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IFeatureServiceDefinition } from \"@esri/arcgis-rest-types\";\nimport { IGetLayerOptions } from \"./helpers\";\n\n/**\n * ```js\n * import { getService } from '@esri/arcgis-rest-feature-layer';\n * //\n * getService({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n * Feature Service request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/feature-service.htm) for more information.\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the getService response.\n */\nexport function getService(\n  options: IGetLayerOptions\n): Promise<IFeatureServiceDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ISpatialReference,\n  IFeature,\n  IHasZM,\n  GeometryType,\n  IField\n} from \"@esri/arcgis-rest-types\";\n\nimport { IGetLayerOptions } from \"./helpers\";\n\n/**\n * Related record query request options. Additional arguments can be passed via the [params](/arcgis-rest-js/api/feature-service/IQueryRelatedOptions/#params) property. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-related-feature-service-.htm) for more information and a full list of parameters.\n */\nexport interface IQueryRelatedOptions extends IGetLayerOptions {\n  relationshipId?: number;\n  objectIds?: number[];\n  outFields?: \"*\" | string[];\n  definitionExpression?: string;\n}\n\n/**\n * Related record data structure\n */\n\nexport interface IRelatedRecordGroup {\n  objectId: number;\n  relatedRecords?: IFeature[];\n  count?: number;\n}\n\n/**\n * Related record response structure\n */\n\nexport interface IQueryRelatedResponse extends IHasZM {\n  geometryType?: GeometryType;\n  spatialReference?: ISpatialReference;\n  fields?: IField[];\n  relatedRecordGroups: IRelatedRecordGroup[];\n}\n/**\n *\n * ```js\n * import { queryRelated } from '@esri/arcgis-rest-feature-layer'\n * //\n * queryRelated({\n *  url: \"http://services.myserver/OrgID/ArcGIS/rest/services/Petroleum/KSPetro/FeatureServer/0\",\n *  relationshipId: 1,\n *  params: { returnCountOnly: true }\n * })\n *  .then(response) // response.relatedRecords\n * ```\n * Query the related records for a feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-related-records-feature-service-.htm) for more information.\n *\n * @param requestOptions\n * @returns A Promise that will resolve with the query response\n */\nexport function queryRelated(\n  requestOptions: IQueryRelatedOptions\n): Promise<IQueryRelatedResponse> {\n  const options = appendCustomParams<IQueryRelatedOptions>(\n    requestOptions,\n    [\"objectIds\", \"relationshipId\", \"definitionExpression\", \"outFields\"],\n    {\n      httpMethod: \"GET\",\n      params: {\n        // set default query parameters\n        definitionExpression: \"1=1\",\n        outFields: \"*\",\n        relationshipId: 0,\n        ...requestOptions.params\n      }\n    }\n  );\n\n  return request(\n    `${cleanUrl(requestOptions.url)}/queryRelatedRecords`,\n    options\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options to for updating a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n */\nexport interface IUpdateAttachmentOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to update related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be updated.\n   */\n  attachment: File;\n  /**\n   * Unique identifier of the attachment.\n   */\n  attachmentId: number;\n}\n\n/**\n *\n * ```js\n * import { updateAttachment } from '@esri/arcgis-rest-feature-layer';\n * //\n * updateAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0],\n *   attachmentId: 306\n * });\n * ```\n * Update a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `updateAttachment()` response.\n */\nexport function updateAttachment(\n  requestOptions: IUpdateAttachmentOptions\n): Promise<{ updateAttachmentResult: IEditFeatureResult }> {\n  const options: IUpdateAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` and `attachmentId` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n  options.params.attachmentId = requestOptions.attachmentId;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/updateAttachment`,\n    options\n  );\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport { IFeature } from \"@esri/arcgis-rest-types\";\n\nimport { ISharedEditOptions, IEditFeatureResult } from \"./helpers\";\n\n/**\n * Update features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n */\nexport interface IUpdateFeaturesOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to update.\n   */\n  features: IFeature[];\n}\n\n/**\n *\n * ```js\n * import { updateFeatures } from '@esri/arcgis-rest-feature-layer';\n * //\n * updateFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   features: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * });\n * ```\n * Update features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the updateFeatures response.\n */\nexport function updateFeatures(\n  requestOptions: IUpdateFeaturesOptions\n): Promise<{ updateResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/updateFeatures`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IUpdateFeaturesOptions>(\n    requestOptions,\n    [\"features\", \"gdbVersion\", \"returnEditMoment\", \"rollbackOnFailure\"],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n"],"names":["getLayer","options","request","cleanUrl","url","decodeValue","value","domain","codedValue","codedValues","find","d","code","name","requestOptions","params","attachment","featureId","appendCustomParams","Promise","resolve","fields","then","metadata","domains","reduce","field","type","extractCodedValueDomains","Object","keys","length","queryResponse","decodedFeatures","features","map","feature","decodedAttributes","key","attributes","hasOwnProperty","attachmentIds","httpMethod","id","response","rawResponse","queryOptions","where","outFields","definitionExpression","relationshipId","attachmentId"],"mappings":"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"}