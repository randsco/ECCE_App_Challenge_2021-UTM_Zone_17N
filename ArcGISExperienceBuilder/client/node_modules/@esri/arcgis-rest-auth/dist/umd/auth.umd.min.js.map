{"version":3,"file":"auth.umd.min.js","sources":["../../src/fetch-token.ts","../../src/ApplicationSession.ts","../../src/generate-token.ts","../../src/federation-utils.ts","../../src/UserSession.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        Date.now() + (response.expires_in * 1000 - 1000)\n      ),\n      ssl: response.ssl === true\n    };\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { fetchToken } from \"./fetch-token\";\n\nexport interface IApplicationSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * ```js\n * import { ApplicationSession } from '@esri/arcgis-rest-auth';\n * const session = new ApplicationSession({\n *   clientId: \"abc123\",\n *   clientSecret: \"sshhhhhh\"\n * })\n * // visit https://developers.arcgis.com to generate your own clientid and secret\n * ```\n * You can use [App Login](/arcgis-rest-js/guides/node/) to access premium content and services in ArcGIS Online.\n *\n */\nexport class ApplicationSession implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n  private duration: number;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationSessionOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // url isnt actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token/`, options).then(\n      response => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      }\n    );\n  }\n\n  public refreshSession() {\n    return this.refreshToken().then(() => this);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  ITokenRequestOptions,\n  NODEJS_DEFAULT_REFERER_HEADER\n} from \"@esri/arcgis-rest-request\";\n\nexport interface IGenerateTokenResponse {\n  token: string;\n  expires: number;\n  ssl: boolean;\n}\n\nexport function generateToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IGenerateTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  /* istanbul ignore else */\n  if (\n    typeof window !== \"undefined\" &&\n    window.location &&\n    window.location.host\n  ) {\n    options.params.referer = window.location.host;\n  } else {\n    options.params.referer = NODEJS_DEFAULT_REFERER_HEADER;\n  }\n\n  return request(url, options);\n}\n","import { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.\\arcgis\\.com\\/sharing\\/rest/;\n\nexport function isOnline(url: string): boolean {\n  return arcgisOnlineUrlRegex.test(url);\n}\n\nexport function normalizeOnlinePortalUrl(portalUrl: string): string {\n  if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n    return portalUrl;\n  }\n\n  switch (getOnlineEnvironment(portalUrl)) {\n    case \"dev\":\n      return \"https://devext.arcgis.com/sharing/rest\";\n    case \"qa\":\n      return \"https://qaext.arcgis.com/sharing/rest\";\n    default:\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n}\n\nexport function getOnlineEnvironment(url: string): string {\n  if (!arcgisOnlineUrlRegex.test(url)) {\n    return null;\n  }\n\n  const match = url.match(arcgisOnlineUrlRegex);\n  const subdomain = match[1].split(\".\").pop();\n\n  if (subdomain.includes(\"dev\")) {\n    return \"dev\";\n  }\n\n  if (subdomain.includes(\"qa\")) {\n    return \"qa\";\n  }\n\n  return \"production\";\n}\n\nexport function isFederated(\n  owningSystemUrl: string,\n  portalUrl: string\n): boolean {\n  const normalizedPortalUrl = cleanUrl(\n    normalizeOnlinePortalUrl(portalUrl)\n  ).replace(/https?:\\/\\//, \"\");\n\n  const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(\n    /https?:\\/\\//,\n    \"\"\n  );\n\n  return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\n\nexport function canUseOnlineToken(\n  portalUrl: string,\n  requestUrl: string\n): boolean {\n  const portalIsOnline = isOnline(portalUrl);\n  const requestIsOnline = isOnline(requestUrl);\n  const portalEnv = getOnlineEnvironment(portalUrl);\n  const requestEnv = getOnlineEnvironment(requestUrl);\n\n  if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n    return true;\n  }\n\n  return false;\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * /generateToken returns a token that cannot be refreshed.\n *\n * oauth2/token can return a token *and* a refreshToken.\n * up until the refreshToken expires, you can use it (and a clientId)\n * to fetch fresh credentials without a username and password.\n *\n * the catch is that this 'authorization_code' flow is only utilized\n * by server based OAuth 2 Node.js applications that call /authorize first.\n */\n\nimport * as http from \"http\";\nimport {\n  request,\n  IRequestOptions,\n  ArcGISAuthError,\n  IAuthenticationManager,\n  ITokenRequestOptions,\n  cleanUrl,\n  encodeQueryString\n} from \"@esri/arcgis-rest-request\";\nimport { IUser } from \"@esri/arcgis-rest-types\";\nimport { generateToken } from \"./generate-token\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils\";\n\n/**\n * Internal utility for resolving a Promise from outside its constructor.\n *\n * See: http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\n */\ninterface IDeferred<T> {\n  promise: Promise<T>;\n  resolve: (v: T) => void;\n  reject: (v: any) => void;\n}\n\nexport type AuthenticationProvider = \"arcgis\" | \"facebook\" | \"google\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\nfunction defer<T>(): IDeferred<T> {\n  const deferred: any = {\n    promise: null,\n    resolve: null,\n    reject: null\n  };\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred as IDeferred<T>;\n}\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/\\S+\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/www\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps)?.\\arcgis\\.com\\/sharing\\/rest/;\n\n/**\n * Options for static OAuth 2.0 helper methods on `UserSession`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration (in minutes) that a token will be valid. Defaults to 20160 (two weeks).\n   */\n  duration?: number;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   *\n   * @nodeOnly\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Applications can specify an opaque value for this parameter to correlate the authorization request sent with the received response. By default, clientId is used.\n   *\n   * @browserOnly\n   */\n  state?: string;\n\n  [key: string]: any;\n}\n\n/**\n * Options for the `UserSession` constructor.\n */\nexport interface IUserSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token from a previous user session.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token from a previous user session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n}\n\n/**\n * ```js\n * import { UserSession } from '@esri/arcgis-rest-auth';\n * UserSession.beginOAuth2({\n *   // register an app of your own to create a unique clientId\n *   clientId: \"abc123\",\n *   redirectUri: 'https://yourapp.com/authenticate.html'\n * })\n *   .then(session)\n * // or\n * new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * // or\n * UserSession.deserialize(cache)\n * ```\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `UserSession` includes helper methods for [OAuth 2.0](/arcgis-rest-js/guides/browser-authentication/) in both browser and server applications.\n */\nexport class UserSession implements IAuthenticationManager {\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the\n   * authentication window will open in a new tab/window otherwise the user will\n   * be redirected to the authorization page in their current tab/window.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  public static beginOAuth2(options: IOAuth2Options, win: any = window) {\n    const {\n      portal,\n      provider,\n      clientId,\n      duration,\n      redirectUri,\n      popup,\n      state,\n      locale,\n      params\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        duration: 20160,\n        popup: true,\n        state: options.clientId,\n        locale: \"\"\n      },\n      ...options\n    };\n    let url: string;\n    if (provider === \"arcgis\") {\n      url = `${portal}/oauth2/authorize?client_id=${clientId}&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    } else {\n      url = `${portal}/oauth2/social/authorize?client_id=${clientId}&socialLoginProviderName=${provider}&autoAccountCreateForSocial=true&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    }\n\n    // append additional params\n    if (params) {\n      url = `${url}&${encodeQueryString(params)}`;\n    }\n\n    if (!popup) {\n      win.location.href = url;\n      return undefined;\n    }\n\n    const session = defer<UserSession>();\n\n    win[`__ESRI_REST_AUTH_HANDLER_${clientId}`] = function(\n      errorString: any,\n      oauthInfoString: string\n    ) {\n      if (errorString) {\n        const error = JSON.parse(errorString);\n        session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n        return;\n      }\n\n      if (oauthInfoString) {\n        const oauthInfo = JSON.parse(oauthInfoString);\n        session.resolve(\n          new UserSession({\n            clientId,\n            portal,\n            ssl: oauthInfo.ssl,\n            token: oauthInfo.token,\n            tokenExpires: new Date(oauthInfo.expires),\n            username: oauthInfo.username\n          })\n        );\n      }\n    };\n\n    win.open(\n      url,\n      \"oauth-window\",\n      \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\"\n    );\n\n    return session.promise;\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0  in. If `options.popup` is `true` the user\n   * will be returned to the previous window. Otherwise a new `UserSession`\n   * will be returned. You must pass the same values for `options.popup` and\n   * `options.portal` as you used in `beginOAuth2()`.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  public static completeOAuth2(options: IOAuth2Options, win: any = window) {\n    const { portal, clientId, popup }: IOAuth2Options = {\n      ...{ portal: \"https://www.arcgis.com/sharing/rest\", popup: true },\n      ...options\n    };\n\n    function completeSignIn(error: any, oauthInfo?: IFetchTokenResponse) {\n      try {\n        let handlerFn;\n        const handlerFnName = `__ESRI_REST_AUTH_HANDLER_${clientId}`;\n\n        if (popup) {\n          // Guard b/c IE does not support window.opener\n          if (win.opener) {\n            if (win.opener.parent && win.opener.parent[handlerFnName]) {\n              handlerFn = win.opener.parent[handlerFnName];\n            } else if (win.opener && win.opener[handlerFnName]) {\n              // support pop-out oauth from within an iframe\n              handlerFn = win.opener[handlerFnName];\n            }\n          } else {\n            // IE\n            if (win !== win.parent && win.parent && win.parent[handlerFnName]) {\n              handlerFn = win.parent[handlerFnName];\n            }\n          }\n          // if we have a handler fn, call it and close the window\n          if (handlerFn) {\n            handlerFn(\n              error ? JSON.stringify(error) : undefined,\n              JSON.stringify(oauthInfo)\n            );\n            win.close();\n            return undefined;\n          }\n        }\n      } catch (e) {\n        throw new ArcGISAuthError(\n          `Unable to complete authentication. It's possible you specified popup based oAuth2 but no handler from \"beginOAuth2()\" present. This generally happens because the \"popup\" option differs between \"beginOAuth2()\" and \"completeOAuth2()\".`\n        );\n      }\n\n      if (error) {\n        throw new ArcGISAuthError(error.errorMessage, error.error);\n      }\n\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username\n      });\n    }\n\n    const match = win.location.href.match(\n      /access_token=(.+)&expires_in=(.+)&username=([^&]+)/\n    );\n\n    if (!match) {\n      const errorMatch = win.location.href.match(\n        /error=(.+)&error_description=(.+)/\n      );\n\n      const error = errorMatch[1];\n      const errorMessage = decodeURIComponent(errorMatch[2]);\n\n      return completeSignIn({ error, errorMessage });\n    }\n\n    const token = match[1];\n    const expires = new Date(\n      Date.now() + parseInt(match[2], 10) * 1000 - 60 * 1000\n    );\n    const username = decodeURIComponent(match[3]);\n    const ssl =\n      win.location.href.indexOf(\"&ssl=true\") > -1 ||\n      win.location.href.indexOf(\"#ssl=true\") > -1;\n\n    return completeSignIn(undefined, {\n      token,\n      expires,\n      ssl,\n      username\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, duration, redirectUri }: IOAuth2Options = {\n      ...{ portal: \"https://arcgis.com/sharing/rest\", duration: 20160 },\n      ...options\n    };\n\n    response.writeHead(301, {\n      Location: `${portal}/oauth2/authorize?client_id=${clientId}&duration=${duration}&response_type=code&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}`\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<UserSession> {\n    const { portal, clientId, redirectUri, refreshTokenTTL }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        refreshTokenTTL: 1440\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    }).then(response => {\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: response.ssl,\n        redirectUri,\n        refreshToken: response.refreshToken,\n        refreshTokenTTL,\n        refreshTokenExpires: new Date(\n          Date.now() + (refreshTokenTTL - 1) * 1000\n        ),\n        token: response.token,\n        tokenExpires: response.expires,\n        username: response.username\n      });\n    });\n  }\n\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new UserSession({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: new Date(options.refreshTokenExpires),\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: new Date(options.tokenExpires),\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      refreshTokenTTL: options.refreshTokenTTL\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * UserSession.fromCredential({\n   *   userId: \"jsmith\",\n   *   token: \"secret\"\n   * });\n   * ```\n   *\n   * @returns UserSession\n   */\n  public static fromCredential(credential: ICredential) {\n    return new UserSession({\n      portal: credential.server.includes(\"sharing/rest\")\n        ? credential.server\n        : credential.server + `/sharing/rest`,\n      ssl: credential.ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(credential.expires)\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user if provided in the `constructor`.\n   */\n  public readonly username: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * Duration of new OAuth 2.0 refresh token validity.\n   */\n  public readonly refreshTokenTTL: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingUserRequest: Promise<IUser>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of trusted 3rd party servers (federated servers) that have\n   *  been validated with `generateToken`.\n   */\n  private trustedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  constructor(options: IUserSessionOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.refreshTokenTTL = options.refreshTokenTTL || 1440;\n\n    this.trustedServers = {};\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.trustedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * esriId.registerToken(session.toCredential());\n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * session.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then(response => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   *    * ```js\n   * session.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else if (this._user) {\n      return Promise.resolve(this._user.username);\n    } else {\n      return this.getUser().then(user => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  public toJSON(): IUserSessionOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      refreshTokenTTL: this.refreshTokenTTL\n    };\n  }\n\n  public serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshSession(\n    requestOptions?: ITokenRequestOptions\n  ): Promise<UserSession> {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this._user = null;\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased becasue in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `trustedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.trustedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = request(`${root}/rest/info`)\n      .then(response => {\n        if (response.owningSystemUrl) {\n          /**\n           * if this server is not owned by this portal\n           * bail out with an error since we know we wont\n           * be able to generate a token\n           */\n          if (!isFederated(response.owningSystemUrl, this.portal)) {\n            throw new ArcGISAuthError(\n              `${url} is not federated with ${this.portal}.`,\n              \"NOT_FEDERATED\"\n            );\n          } else {\n            /**\n             * if the server is federated, use the relevant token endpoint.\n             */\n            return request(\n              `${response.owningSystemUrl}/sharing/rest/info`,\n              requestOptions\n            );\n          }\n        } else if (\n          response.authInfo &&\n          this.trustedServers[root] !== undefined\n        ) {\n          /**\n           * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n           * federation, but the root server url is recognized, use its built in token endpoint.\n           */\n          return Promise.resolve({ authInfo: response.authInfo });\n        } else {\n          throw new ArcGISAuthError(\n            `${url} is not federated with any portal and is not explicitly trusted.`,\n            \"NOT_FEDERATED\"\n          );\n        }\n      })\n      .then((response: any) => {\n        return response.authInfo.tokenServicesUrl;\n      })\n      .then((tokenServicesUrl: string) => {\n        // an expired token cant be used to generate a new token\n        if (this.token && this.tokenExpires.getTime() > Date.now()) {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              token: this.token,\n              serverUrl: url,\n              expiration: this.tokenDuration,\n              client: \"referer\"\n            }\n          });\n          // generate an entirely fresh token if necessary\n        } else {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              username: this.username,\n              password: this.password,\n              expiration: this.tokenDuration,\n              client: \"referer\"\n            }\n          }).then((response: any) => {\n            this._token = response.token;\n            this._tokenExpires = new Date(response.expires);\n            return response;\n          });\n        }\n      })\n      .then(response => {\n        this.trustedServers[root] = {\n          expires: new Date(response.expires),\n          token: response.token\n        };\n        delete this._pendingTokenRequests[root];\n        return response.token;\n      });\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshSession(\n        requestOptions\n      ).then(session => {\n        this._pendingTokenRequests[this.portal] = null;\n        return session.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const options = {\n      params: {\n        username: this.username,\n        password: this.password,\n        expiration: this.tokenDuration\n      },\n      ...requestOptions\n    };\n    return generateToken(`${this.portal}/generateToken`, options).then(\n      (response: any) => {\n        this._token = response.token;\n        this._tokenExpires = new Date(response.expires);\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() < Date.now()\n    ) {\n      return this.refreshRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      return this;\n    });\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  private refreshRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      this._refreshToken = response.refreshToken;\n      this._refreshTokenExpires = new Date(\n        Date.now() + (this.refreshTokenTTL - 1) * 60 * 1000\n      );\n      return this;\n    });\n  }\n}\n"],"names":["fetchToken","url","requestOptions","options","rawResponse","request","then","response","r","token","access_token","username","expires","Date","now","expires_in","ssl","refresh_token","refreshToken","ApplicationSession","this","getTime","Promise","resolve","_pendingTokenRequest","params","client_id","clientId","client_secret","clientSecret","grant_type","expiration","duration","portal","_this","generateToken","window","location","host","referer","NODEJS_DEFAULT_REFERER_HEADER","arcgisOnlineUrlRegex","isOnline","test","getOnlineEnvironment","subdomain","match","split","pop","includes","isFederated","owningSystemUrl","portalUrl","normalizedPortalUrl","cleanUrl","normalizeOnlinePortalUrl","replace","normalizedOwningSystemUrl","RegExp","UserSession","win","_a","provider","redirectUri","popup","state","locale","encodeURIComponent","encodeQueryString","session","deferred","promise","reject","defer","errorString","oauthInfoString","error","JSON","parse","ArcGISAuthError","errorMessage","oauthInfo","tokenExpires","open","href","completeSignIn","handlerFn","handlerFnName","opener","parent","stringify","undefined","close","e","errorMatch","decodeURIComponent","parseInt","indexOf","writeHead","Location","end","authorizationCode","refreshTokenTTL","redirect_uri","code","refreshTokenExpires","str","password","tokenDuration","credential","server","userId","Object","_token","_tokenExpires","_refreshToken","_refreshTokenExpires","_pendingUserRequest","_user","tslib_1.__assign","httpMethod","authentication","getUser","user","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","canUseOnlineToken","getFreshToken","getTokenForServer","refreshWithUsernameAndPassword","refreshWithRefreshToken","protocol","_b","domain","path","toLowerCase","join","root","getServerRootUrl","existingToken","trustedServers","_pendingTokenRequests","authInfo","tokenServicesUrl","serverUrl","client","refreshSession","refreshRefreshToken"],"mappings":";;;;;igBAyBgBA,EACdC,EACAC,GAEA,IAAMC,EAA2BD,EAIjC,OAFAC,EAAQC,aAAc,EAEfC,UAAQJ,EAAKE,GAASG,KAAK,SAACC,GACjC,IAAMC,EAAyB,CAC7BC,MAAOF,EAASG,aAChBC,SAAUJ,EAASI,SACnBC,QAAS,IAAIC,KAEXA,KAAKC,OAA+B,IAAtBP,EAASQ,WAAoB,MAE7CC,KAAsB,IAAjBT,EAASS,KAMhB,OAJIT,EAASU,gBACXT,EAAEU,aAAeX,EAASU,eAGrBT,WCkCFW,qBAAP,SACElB,EACAC,GAEA,OAAIkB,KAAKX,OAASW,KAAKR,SAAWQ,KAAKR,QAAQS,UAAYR,KAAKC,MACvDQ,QAAQC,QAAQH,KAAKX,QAG1BW,KAAKI,uBAITJ,KAAKI,qBAAuBJ,KAAKF,aAAahB,IAHrCkB,KAAKI,uBAQTL,yBAAP,SAAoBjB,GAApB,WACQC,KACJsB,OAAQ,CACNC,UAAWN,KAAKO,SAChBC,cAAeR,KAAKS,aACpBC,WAAY,qBACZC,WAAYX,KAAKY,WAEhB9B,GAEL,OAAOF,EAAcoB,KAAKa,wBAAwB9B,GAASG,KACzD,SAAAC,GAIE,OAHA2B,EAAKV,qBAAuB,KAC5BU,EAAKzB,MAAQF,EAASE,MACtByB,EAAKtB,QAAUL,EAASK,QACjBL,EAASE,SAKfU,2BAAP,WAAA,WACE,OAAOC,KAAKF,eAAeZ,KAAK,WAAM,OAAA4B,QAhDxC,WAAY/B,GACViB,KAAKO,SAAWxB,EAAQwB,SACxBP,KAAKS,aAAe1B,EAAQ0B,aAC5BT,KAAKX,MAAQN,EAAQM,MACrBW,KAAKR,QAAUT,EAAQS,QACvBQ,KAAKa,OAAS9B,EAAQ8B,QAAU,sCAChCb,KAAKY,SAAW7B,EAAQ6B,UAAY,cC7DxBG,EACdlC,EACAC,GAEA,IAAMC,EAA2BD,EAajC,MAToB,oBAAXkC,QACPA,OAAOC,UACPD,OAAOC,SAASC,KAEhBnC,EAAQsB,OAAOc,QAAUH,OAAOC,SAASC,KAEzCnC,EAAQsB,OAAOc,QAAUC,gCAGpBnC,UAAQJ,EAAKE,GC7BtB,IAAMsC,EAAuB,4CAYbC,EAASzC,GACvB,OAAOwC,EAAqBE,KAAK1C,YAkBnB2C,EAAqB3C,GACnC,IAAKwC,EAAqBE,KAAK1C,GAC7B,OAAO,KAGT,IACM4C,EADQ5C,EAAI6C,MAAML,GACA,GAAGM,MAAM,KAAKC,MAEtC,OAAIH,EAAUI,SAAS,OACd,MAGLJ,EAAUI,SAAS,MACd,KAGF,sBAGOC,EACdC,EACAC,GAEA,IAAMC,EAAsBC,oBAtCWF,GACvC,IAAKX,EAAqBE,KAAKS,GAC7B,OAAOA,EAGT,OAAQR,EAAqBQ,IAC3B,IAAK,MACH,MAAO,yCACT,IAAK,KACH,MAAO,wCACT,QACE,MAAO,uCA4BTG,CAAyBH,IACzBI,QAAQ,cAAe,IAEnBC,EAA4BH,WAASH,GAAiBK,QAC1D,cACA,IAGF,OAAO,IAAIE,OAAOD,EAA2B,KAAKd,KAAKU,UCkMzCM,cAAd,SAA0BxD,EAAyByD,gBAAAA,UAC3C,IAqBF3D,EArBE4D,2HACJ5B,WACA6B,aACAnC,aACAK,aACA+B,gBACAC,UACAC,UACAC,WACAzC,WA4BF,GAdExB,EADe,WAAb6D,EACO7B,iCAAqCN,qCAA2CK,mBAAyBmC,mBAChHJ,aACSE,aAAgBC,EAElBjC,wCAA4CN,8BAAoCmC,qEAA2E9B,mBAAyBmC,mBAC3LJ,aACSE,aAAgBC,EAIzBzC,IACFxB,EAASA,MAAOmE,oBAAkB3C,IAG/BuC,EAAL,CAKA,IAAMK,EA1PV,WACE,IAAMC,EAAgB,CACpBC,QAAS,KACThD,QAAS,KACTiD,OAAQ,MAQV,OALAF,EAASC,QAAU,IAAIjD,QAAQ,SAACC,EAASiD,GACvCF,EAAS/C,QAAUA,EACnB+C,EAASE,OAASA,IAGbF,EA8OWG,GAiChB,OA/BAb,EAAI,4BAA4BjC,GAAc,SAC5C+C,EACAC,GAEA,GAAID,EAAJ,CACE,IAAME,EAAQC,KAAKC,MAAMJ,GACzBL,EAAQG,OAAO,IAAIO,kBAAgBH,EAAMI,aAAcJ,EAAMA,aAI/D,GAAID,EAAiB,CACnB,IAAMM,EAAYJ,KAAKC,MAAMH,GAC7BN,EAAQ9C,QACN,IAAIoC,EAAY,CACdhC,WACAM,SACAjB,IAAKiE,EAAUjE,IACfP,MAAOwE,EAAUxE,MACjByE,aAAc,IAAIrE,KAAKoE,EAAUrE,SACjCD,SAAUsE,EAAUtE,cAM5BiD,EAAIuB,KACFlF,EACA,eACA,wFAGKoE,EAAQE,QArCbX,EAAIvB,SAAS+C,KAAOnF,GAiDV0D,iBAAd,SAA6BxD,EAAyByD,gBAAAA,UAC9C,IAAAC,+DAAE5B,WAAQN,aAAUqC,UAK1B,SAASqB,EAAeT,EAAYK,GAClC,IACE,IAAIK,SACEC,EAAgB,4BAA4B5D,EAElD,GAAIqC,IAEEJ,EAAI4B,OACF5B,EAAI4B,OAAOC,QAAU7B,EAAI4B,OAAOC,OAAOF,GACzCD,EAAY1B,EAAI4B,OAAOC,OAAOF,GACrB3B,EAAI4B,QAAU5B,EAAI4B,OAAOD,KAElCD,EAAY1B,EAAI4B,OAAOD,IAIrB3B,IAAQA,EAAI6B,QAAU7B,EAAI6B,QAAU7B,EAAI6B,OAAOF,KACjDD,EAAY1B,EAAI6B,OAAOF,IAIvBD,GAMF,OALAA,EACEV,EAAQC,KAAKa,UAAUd,QAASe,EAChCd,KAAKa,UAAUT,SAEjBrB,EAAIgC,QAIR,MAAOC,GACP,MAAM,IAAId,kBACR,6OAIJ,GAAIH,EACF,MAAM,IAAIG,kBAAgBH,EAAMI,aAAcJ,EAAMA,OAGtD,OAAO,IAAIjB,EAAY,CACrBhC,WACAM,SACAjB,IAAKiE,EAAUjE,IACfP,MAAOwE,EAAUxE,MACjByE,aAAcD,EAAUrE,QACxBD,SAAUsE,EAAUtE,WAIxB,IAAMmC,EAAQc,EAAIvB,SAAS+C,KAAKtC,MAC9B,sDAGF,IAAKA,EAAO,CACV,IAAMgD,EAAalC,EAAIvB,SAAS+C,KAAKtC,MACnC,qCAMF,OAAOuC,EAAe,CAAET,MAHVkB,EAAW,GAGMd,aAFVe,mBAAmBD,EAAW,MAKrD,IAAMrF,EAAQqC,EAAM,GACdlC,EAAU,IAAIC,KAClBA,KAAKC,MAAiC,IAAzBkF,SAASlD,EAAM,GAAI,IAAa,KAEzCnC,EAAWoF,mBAAmBjD,EAAM,IAK1C,OAAOuC,OAAeM,EAAW,CAC/BlF,QACAG,UACAI,KAN0C,EAA1C4C,EAAIvB,SAAS+C,KAAKa,QAAQ,eACgB,EAA1CrC,EAAIvB,SAAS+C,KAAKa,QAAQ,aAM1BtF,cAUUgD,YAAd,SACExD,EACAI,GAEM,IAAAsD,iEAAE5B,WAAQN,aAAUK,aAAU+B,gBAKpCxD,EAAS2F,UAAU,IAAK,CACtBC,SAAalE,iCAAqCN,eAAqBK,sCAA4CmC,mBACjHJ,KAIJxD,EAAS6F,OASGzC,4BAAd,SACExD,EACAkG,GAEM,IAAAxC,2EAAE5B,WAAQN,aAAUoC,gBAAauC,oBAQvC,OAAOtG,EAAciC,kBAAuB,CAC1CR,OAAQ,CACNK,WAAY,qBACZJ,UAAWC,EACX4E,aAAcxC,EACdyC,KAAMH,KAEP/F,KAAK,SAAAC,GACN,OAAO,IAAIoD,EAAY,CACrBhC,WACAM,SACAjB,IAAKT,EAASS,IACd+C,cACA7C,aAAcX,EAASW,aACvBoF,kBACAG,oBAAqB,IAAI5F,KACvBA,KAAKC,MAAgC,KAAvBwF,EAAkB,IAElC7F,MAAOF,EAASE,MAChByE,aAAc3E,EAASK,QACvBD,SAAUJ,EAASI,cAKXgD,cAAd,SAA0B+C,GACxB,IAAMvG,EAAU0E,KAAKC,MAAM4B,GAC3B,OAAO,IAAI/C,EAAY,CACrBhC,SAAUxB,EAAQwB,SAClBT,aAAcf,EAAQe,aACtBuF,oBAAqB,IAAI5F,KAAKV,EAAQsG,qBACtC9F,SAAUR,EAAQQ,SAClBgG,SAAUxG,EAAQwG,SAClBlG,MAAON,EAAQM,MACfyE,aAAc,IAAIrE,KAAKV,EAAQ+E,cAC/BjD,OAAQ9B,EAAQ8B,OAChBjB,IAAKb,EAAQa,IACb4F,cAAezG,EAAQyG,cACvB7C,YAAa5D,EAAQ4D,YACrBuC,gBAAiBnG,EAAQmG,mBAgBf3C,iBAAd,SAA6BkD,GAC3B,OAAO,IAAIlD,EAAY,CACrB1B,OAAQ4E,EAAWC,OAAO7D,SAAS,gBAC/B4D,EAAWC,OACXD,EAAWC,OAAS,gBACxB9F,IAAK6F,EAAW7F,IAChBP,MAAOoG,EAAWpG,MAClBE,SAAUkG,EAAWE,OACrB7B,aAAc,IAAIrE,KAAKgG,EAAWjG,YA8FtCoG,sBAAIrD,yBAAJ,WACE,OAAOvC,KAAK6F,wCAMdD,sBAAIrD,gCAAJ,WACE,OAAOvC,KAAK8F,+CAMdF,sBAAIrD,gCAAJ,WACE,OAAOvC,KAAK+F,+CAMdH,sBAAIrD,uCAAJ,WACE,OAAOvC,KAAKgG,sDA2CPzD,yBAAP,WACE,MAAO,CACL/C,QAASQ,KAAK8D,aAAa7D,UAC3ByF,OAAQ1F,KAAKa,OACbjB,IAAKI,KAAKJ,IACVP,MAAOW,KAAKX,MACZsG,OAAQ3F,KAAKT,WAiBVgD,oBAAP,SAAezD,GAAf,WACE,GAAIkB,KAAKiG,oBACP,OAAOjG,KAAKiG,oBACP,GAAIjG,KAAKkG,MACd,OAAOhG,QAAQC,QAAQH,KAAKkG,OAE5B,IAAMrH,EAASmB,KAAKa,yBAEd9B,EAAUoH,GACdC,WAAY,MACZC,eAAgBrG,MACblB,GACHE,aAAa,IASf,OANAgB,KAAKiG,oBAAsBhH,UAAQJ,EAAKE,GAASG,KAAK,SAAAC,GAGpD,OAFA2B,EAAKoF,MAAQ/G,EACb2B,EAAKmF,oBAAsB,KACpB9G,IAGFa,KAAKiG,qBAcT1D,wBAAP,WACE,OAAIvC,KAAKT,SACAW,QAAQC,QAAQH,KAAKT,UACnBS,KAAKkG,MACPhG,QAAQC,QAAQH,KAAKkG,MAAM3G,UAE3BS,KAAKsG,UAAUpH,KAAK,SAAAqH,GACzB,OAAOA,EAAKhH,YAYXgD,qBAAP,SAAgB1D,EAAaC,GAC3B,gBDpsBFkD,EACAwE,GAEA,IAAMC,EAAiBnF,EAASU,GAC1B0E,EAAkBpF,EAASkF,GAC3BG,EAAYnF,EAAqBQ,GACjC4E,EAAapF,EAAqBgF,GAExC,SAAIC,IAAkBC,GAAmBC,IAAcC,GC4rBjDC,CAAkB7G,KAAKa,OAAQhC,GAC1BmB,KAAK8G,cAAchI,GACjB,IAAIwD,OAAOtC,KAAKa,OAAQ,KAAKU,KAAK1C,GACpCmB,KAAK8G,cAAchI,GAEnBkB,KAAK+G,kBAAkBlI,EAAKC,IAIhCyD,mBAAP,WACE,MAAO,CACLhC,SAAUP,KAAKO,SACfT,aAAcE,KAAKF,aACnBuF,oBAAqBrF,KAAKqF,oBAC1B9F,SAAUS,KAAKT,SACfgG,SAAUvF,KAAKuF,SACflG,MAAOW,KAAKX,MACZyE,aAAc9D,KAAK8D,aACnBjD,OAAQb,KAAKa,OACbjB,IAAKI,KAAKJ,IACV4F,cAAexF,KAAKwF,cACpB7C,YAAa3C,KAAK2C,YAClBuC,gBAAiBlF,KAAKkF,kBAInB3C,sBAAP,WACE,OAAOkB,KAAKa,UAAUtE,OAMjBuC,2BAAP,SACEzD,GAKA,OAFAkB,KAAKkG,MAAQ,KAETlG,KAAKT,UAAYS,KAAKuF,SACjBvF,KAAKgH,+BAA+BlI,GAGzCkB,KAAKO,UAAYP,KAAKF,aACjBE,KAAKiH,0BAGP/G,QAAQkD,OAAO,IAAIO,kBAAgB,8BAQrCpB,6BAAP,SAAwB1D,GACf,IAGD4D,+FAAQyE,cACRC,kBAACC,OAAQC,aAIf,MAAO,GAAGH,EAAWE,EAAOE,kBAAiBD,EAAKE,KAAK,MAOjDhF,8BAAR,SACE1D,EACAC,GAFF,WAMQ0I,EAAOxH,KAAKyH,iBAAiB5I,GAC7B6I,EAAgB1H,KAAK2H,eAAeH,GAE1C,OACEE,GACAA,EAAclI,SACdkI,EAAclI,QAAQS,UAAYR,KAAKC,MAEhCQ,QAAQC,QAAQuH,EAAcrI,QAGnCW,KAAK4H,sBAAsBJ,KAI/BxH,KAAK4H,sBAAsBJ,GAAQvI,UAAWuI,gBAC3CtI,KAAK,SAAAC,GACJ,GAAIA,EAAS4C,gBAAiB,CAM5B,GAAKD,EAAY3C,EAAS4C,gBAAiBjB,EAAKD,QAS9C,OAAO5B,UACFE,EAAS4C,qCACZjD,GAVF,MAAM,IAAI6E,kBACL9E,4BAA6BiC,EAAKD,WACrC,iBAWC,GACL1B,EAAS0I,eACqBtD,IAA9BzD,EAAK6G,eAAeH,GAMpB,OAAOtH,QAAQC,QAAQ,CAAE0H,SAAU1I,EAAS0I,WAE5C,MAAM,IAAIlE,kBACL9E,qEACH,mBAILK,KAAK,SAACC,GACL,OAAOA,EAAS0I,SAASC,mBAE1B5I,KAAK,SAAC4I,GAEL,OAAIhH,EAAKzB,OAASyB,EAAKgD,aAAa7D,UAAYR,KAAKC,MAC5CqB,EAAc+G,EAAkB,CACrCzH,OAAQ,CACNhB,MAAOyB,EAAKzB,MACZ0I,UAAWlJ,EACX8B,WAAYG,EAAK0E,cACjBwC,OAAQ,aAKLjH,EAAc+G,EAAkB,CACrCzH,OAAQ,CACNd,SAAUuB,EAAKvB,SACfgG,SAAUzE,EAAKyE,SACf5E,WAAYG,EAAK0E,cACjBwC,OAAQ,aAET9I,KAAK,SAACC,GAGP,OAFA2B,EAAK+E,OAAS1G,EAASE,MACvByB,EAAKgF,cAAgB,IAAIrG,KAAKN,EAASK,SAChCL,MAIZD,KAAK,SAAAC,GAMJ,OALA2B,EAAK6G,eAAeH,GAAQ,CAC1BhI,QAAS,IAAIC,KAAKN,EAASK,SAC3BH,MAAOF,EAASE,cAEXyB,EAAK8G,sBAAsBJ,GAC3BrI,EAASE,SA7EXW,KAAK4H,sBAAsBJ,KAsF9BjF,0BAAR,SAAsBzD,GAAtB,WACE,OAAIkB,KAAKX,QAAUW,KAAK8D,aACf5D,QAAQC,QAAQH,KAAKX,OAI5BW,KAAKX,OACLW,KAAK8D,cACL9D,KAAK8D,aAAa7D,UAAYR,KAAKC,MAE5BQ,QAAQC,QAAQH,KAAKX,QAGzBW,KAAK4H,sBAAsB5H,KAAKa,UACnCb,KAAK4H,sBAAsB5H,KAAKa,QAAUb,KAAKiI,eAC7CnJ,GACAI,KAAK,SAAA+D,GAEL,OADAnC,EAAK8G,sBAAsB9G,EAAKD,QAAU,KACnCoC,EAAQ5D,SAIZW,KAAK4H,sBAAsB5H,KAAKa,UAOjC0B,2CAAR,SACEzD,GADF,WAGQC,KACJsB,OAAQ,CACNd,SAAUS,KAAKT,SACfgG,SAAUvF,KAAKuF,SACf5E,WAAYX,KAAKwF,gBAEhB1G,GAEL,OAAOiC,EAAiBf,KAAKa,wBAAwB9B,GAASG,KAC5D,SAACC,GAGC,OAFA2B,EAAK+E,OAAS1G,EAASE,MACvByB,EAAKgF,cAAgB,IAAIrG,KAAKN,EAASK,SAChCsB,KAQLyB,oCAAR,SAAgCzD,GAAhC,WACE,GACEkB,KAAKF,cACLE,KAAKqF,qBACLrF,KAAKqF,oBAAoBpF,UAAYR,KAAKC,MAE1C,OAAOM,KAAKkI,oBAAoBpJ,GAGlC,IAAMC,KACJsB,OAAQ,CACNC,UAAWN,KAAKO,SAChBV,cAAeG,KAAKF,aACpBY,WAAY,kBAEX5B,GAEL,OAAOF,EAAcoB,KAAKa,uBAAuB9B,GAASG,KAAK,SAAAC,GAG7D,OAFA2B,EAAK+E,OAAS1G,EAASE,MACvByB,EAAKgF,cAAgB3G,EAASK,QACvBsB,KAQHyB,gCAAR,SAA4BzD,GAA5B,WACQC,KACJsB,OAAQ,CACNC,UAAWN,KAAKO,SAChBV,cAAeG,KAAKF,aACpBqF,aAAcnF,KAAK2C,YACnBjC,WAAY,2BAEX5B,GAGL,OAAOF,EAAcoB,KAAKa,uBAAuB9B,GAASG,KAAK,SAAAC,GAO7D,OANA2B,EAAK+E,OAAS1G,EAASE,MACvByB,EAAKgF,cAAgB3G,EAASK,QAC9BsB,EAAKiF,cAAgB5G,EAASW,aAC9BgB,EAAKkF,qBAAuB,IAAIvG,KAC9BA,KAAKC,MAAqC,IAA5BoB,EAAKoE,gBAAkB,GAAU,KAE1CpE,QAvYX,WAAY/B,GAmBV,GAlBAiB,KAAKO,SAAWxB,EAAQwB,SACxBP,KAAK+F,cAAgBhH,EAAQe,aAC7BE,KAAKgG,qBAAuBjH,EAAQsG,oBACpCrF,KAAKT,SAAWR,EAAQQ,SACxBS,KAAKuF,SAAWxG,EAAQwG,SACxBvF,KAAK6F,OAAS9G,EAAQM,MACtBW,KAAK8F,cAAgB/G,EAAQ+E,aAC7B9D,KAAKa,OAAS9B,EAAQ8B,OAClBqB,WAASnD,EAAQ8B,QACjB,sCACJb,KAAKJ,IAAMb,EAAQa,IACnBI,KAAK0C,SAAW3D,EAAQ2D,UAAY,SACpC1C,KAAKwF,cAAgBzG,EAAQyG,eAAiB,MAC9CxF,KAAK2C,YAAc5D,EAAQ4D,YAC3B3C,KAAKkF,gBAAkBnG,EAAQmG,iBAAmB,KAElDlF,KAAK2H,eAAiB,GAElB5I,EAAQ2G,OAAQ,CAElB,IAAM8B,EAAOxH,KAAKyH,iBAAiB1I,EAAQ2G,QAE3C1F,KAAK2H,eAAeH,GAAQ,CAC1BnI,MAAON,EAAQM,MACfG,QAAST,EAAQ+E,cAGrB9D,KAAK4H,sBAAwB"}