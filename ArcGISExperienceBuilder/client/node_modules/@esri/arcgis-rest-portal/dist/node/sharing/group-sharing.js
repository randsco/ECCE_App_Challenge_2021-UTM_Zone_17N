"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
var get_portal_url_1 = require("../util/get-portal-url");
var helpers_1 = require("./helpers");
var get_user_1 = require("../users/get-user");
var add_users_1 = require("../groups/add-users");
var update_user_membership_1 = require("../groups/update-user-membership");
var search_1 = require("../items/search");
/**
 * ```js
 * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';
 * //
 * shareItemWithGroup({
 *   id: "abc123",
 *   groupId: "xyz987",
 *   authentication
 * })
 * ```
 * Share an item with a group, either as an
 * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm),
 * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or
 * organization admin.
 *
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function shareItemWithGroup(requestOptions) {
    return changeGroupSharing(tslib_1.__assign({ action: "share" }, requestOptions));
}
exports.shareItemWithGroup = shareItemWithGroup;
/**
 * Stop sharing an item with a group, either as an
 * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-item-owner-.htm),
 * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-group-admin-.htm) or
 * organization admin.
 *
 * ```js
 * import { unshareItemWithGroup } from '@esri/arcgis-rest-portal';
 *
 * unshareItemWithGroup({
 *   id: "abc123",
 *   groupId: "xyz987",
 *   authentication: session
 * })
 * ```
 *
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function unshareItemWithGroup(requestOptions) {
    return changeGroupSharing(tslib_1.__assign({ action: "unshare" }, requestOptions));
}
exports.unshareItemWithGroup = unshareItemWithGroup;
/**
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function changeGroupSharing(requestOptions) {
    var username = requestOptions.authentication.username;
    var itemOwner = requestOptions.owner || username;
    var isSharedEditingGroup = requestOptions.confirmItemControl || false;
    return get_user_1.getUser({
        username: username,
        authentication: requestOptions.authentication
    }).then(function (currentUser) {
        var isAdmin = currentUser.role === "org_admin";
        var resultProp = requestOptions.action === "share" ? "notSharedWith" : "notUnsharedFrom";
        // check if the item has already been shared with the group...
        return isItemSharedWithGroup(requestOptions).then(function (result) {
            // if we are sharing and result is true OR we are unsharing and result is false... short circuit
            if ((requestOptions.action === "share" && result === true) ||
                (requestOptions.action === "unshare" && result === false)) {
                // and send back the same response ArcGIS Online would
                var response = {
                    itemId: requestOptions.id,
                    shortcut: true
                };
                response[resultProp] = [];
                return response;
            }
            else {
                // next check to ensure the user is a member of the group
                return helpers_1.getUserMembership(requestOptions)
                    .then(function (membership) {
                    // Stack all the exception conditions up top so we can
                    // strealine the promise chain
                    // if user is not a member of the group and not an orgAdmin
                    if (membership === "none" && !isAdmin) {
                        // abort and reject promise
                        throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are not a member of the specified group " + requestOptions.groupId + ".");
                    }
                    // it's a sharedEditing Group and user is not owner, org orgAdmin
                    if (isSharedEditingGroup && itemOwner !== username && !isAdmin) {
                        // abort and reject promise
                        throw Error("This item can not be " + requestOptions.action + "d to shared editing group " + requestOptions.groupId + " by " + username + " as they not the item owner.");
                    }
                    // only item-owners, group-admin's, group-owners can unshare an item from a group
                    if (requestOptions.action === "unshare" &&
                        itemOwner !== username && // not item owner
                        membership !== "admin" && // not group admin
                        membership !== "owner" // not group owner
                    ) {
                        throw Error("This item can not be " + requestOptions.action + "d from group " + requestOptions.groupId + " by " + username + " as they not the item owner, group admin or group owner.");
                    }
                    // if it's a sharedEditing Group, and the current user is not the owner, but an OrgAdmin
                    // then we can let call shareToGroupAsNonOwner which will add the owner to the group
                    // and then share the item to the group
                    if (requestOptions.action === "share" &&
                        isSharedEditingGroup &&
                        itemOwner !== username &&
                        isAdmin) {
                        return shareToGroupAsNonOwner(currentUser, requestOptions);
                    }
                    else {
                        // if the current user is a member of the target group
                        if (membership !== "none") {
                            // we let the sharing call go
                            return shareToGroup(requestOptions);
                        }
                        else {
                            // otherwise - even if they are org_admin - we throw staying the current user must be a member of the group
                            throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are not a member of the specified group " + requestOptions.groupId + ".");
                        }
                    }
                })
                    .then(function (sharingResponse) {
                    if (sharingResponse[resultProp].length) {
                        throw Error("Item " + requestOptions.id + " could not be " + requestOptions.action + "d to group " + requestOptions.groupId + ".");
                    }
                    else {
                        // all is well
                        return sharingResponse;
                    }
                });
            } // else
        }); // then
    });
}
/**
 * Under very specific circumstances, and item may be shared
 * to a group by a user other than the owner.
 * Specifically:
 * - current user must be org_admin
 * - item owner must be in same org as current user
 * - item owner must be able to be added to the group (less than 512 groups)
 * @param currentUser Current user attempting to do the share
 * @param requestOptions IGroupSharingUnshareingOptions
 */
function shareToGroupAsNonOwner(currentUser, requestOptions) {
    var itemOwner = requestOptions.owner;
    return get_user_1.getUser({
        username: itemOwner,
        authentication: requestOptions.authentication
    })
        .then(function (ownerUser) {
        // if they are in different orgs, eject
        if (currentUser.orgId !== ownerUser.orgId) {
            throw Error("User " + itemOwner + " is not a member of the same org as " + currentUser.username + ". Consequently they can not be added added to group " + requestOptions.groupId + " nor can item " + requestOptions.id + " be shared to the group.");
        }
        // see if the owner is a member of the group
        var ownerGroups = ownerUser.groups || [];
        var group = ownerGroups.find(function (g) {
            return g.id === requestOptions.groupId;
        });
        // if owner is not a member, and has 512 groups
        if (!group && ownerGroups.length > 511) {
            throw Error("User " + itemOwner + " already has 512 groups, and can not be added to group " + requestOptions.groupId + ". Consequently item " + requestOptions.id + " can not be shared to the group.");
        }
        // decide if we need to add them or upgrade them
        if (group) {
            // they are in the group...
            // check member type
            if (group.userMembership.memberType === "member") {
                // promote them
                return update_user_membership_1.updateUserMemberships({
                    id: requestOptions.groupId,
                    users: [itemOwner],
                    newMemberType: "admin",
                    authentication: requestOptions.authentication
                }).then(function (response) {
                    // convert the result into the right type
                    var notAdded = response.results.reduce(function (acc, entry) {
                        if (!entry.success) {
                            acc.push(entry.username);
                        }
                        return acc;
                    }, []);
                    // and return it
                    return {
                        notAdded: notAdded
                    };
                });
            }
            else {
                // they are already an admin in the group
                // return the same response the API would if we added them
                return { notAdded: [] };
            }
        }
        else {
            // add user to group as an admin
            return add_users_1.addGroupUsers({
                id: requestOptions.groupId,
                admins: [itemOwner],
                authentication: requestOptions.authentication
            });
        }
    })
        .then(function (membershipResponse) {
        if (membershipResponse.notAdded.length) {
            throw Error("Error adding user " + itemOwner + " to group " + requestOptions.groupId + ". Consequently item " + requestOptions.id + " was not shared to the group.");
        }
        else {
            // then make the sharing call
            return shareToGroup(requestOptions);
        }
    });
}
function shareToGroup(requestOptions) {
    var username = requestOptions.authentication.username;
    var itemOwner = requestOptions.owner || username;
    // decide what url to use
    // default to the non-owner url...
    var url = get_portal_url_1.getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/" + requestOptions.action;
    // but if they are the owner, we use a different path...
    if (itemOwner === username) {
        url = get_portal_url_1.getPortalUrl(requestOptions) + "/content/users/" + itemOwner + "/items/" + requestOptions.id + "/" + requestOptions.action;
    }
    // now its finally time to do the sharing
    requestOptions.params = {
        groups: requestOptions.groupId,
        confirmItemControl: requestOptions.confirmItemControl
    };
    return arcgis_rest_request_1.request(url, requestOptions);
}
/**
 * ```js
 * import { isItemSharedWithGroup } from "@esri/arcgis-rest-portal";
 * //
 * isItemSharedWithGroup({
 *   groupId: 'bc3,
 *   itemId: 'f56,
 *   authentication
 * })
 * .then(isShared => {})
 * ```
 * Find out whether or not an item is already shared with a group.
 *
 * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.
 * @returns Promise that will resolve with true/false
 */
function isItemSharedWithGroup(requestOptions) {
    var searchOpts = {
        q: "id: " + requestOptions.id + " AND group: " + requestOptions.groupId,
        start: 1,
        num: 10,
        sortField: "title",
        authentication: requestOptions.authentication,
        httpMethod: "POST"
    };
    return search_1.searchItems(searchOpts).then(function (searchResponse) {
        var result = false;
        if (searchResponse.total > 0) {
            result = searchResponse.results.some(function (itm) {
                return itm.id === requestOptions.id;
            });
            return result;
        }
    });
}
exports.isItemSharedWithGroup = isItemSharedWithGroup;
//# sourceMappingURL=group-sharing.js.map