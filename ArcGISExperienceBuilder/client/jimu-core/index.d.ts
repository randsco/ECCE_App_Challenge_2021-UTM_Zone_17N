/// <reference types="lodash" />
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as ReactRedux from 'react-redux';
import * as queryString from 'query-string';
import * as Immutable from 'seamless-immutable';
import * as classNames from 'classnames';
import { v1 as uuidv1 } from 'uuid';
import * as emotionCore from '@emotion/core';
import styled from '@emotion/styled';
import { ThemeProvider } from 'emotion-theming';
import * as xss from 'xss';
import type { SerializedStyles } from '@emotion/serialize';
import * as invariant from 'invariant';
import ReactResizeDetector from 'react-resize-detector';
import ResizeObserver from 'resize-observer-polyfill';
import * as spring from 'react-spring';
import * as restAuth from '@esri/arcgis-rest-auth';
import * as restFeatureLayer from '@esri/arcgis-rest-feature-layer';
import * as restRequest from '@esri/arcgis-rest-request';
import * as restPortal from '@esri/arcgis-rest-portal';
import { Sanitizer } from '@esri/arcgis-html-sanitizer';
import * as appActions from './lib/app-actions';
import * as utils from './lib/utils/utils';
import * as urlUtils from './lib/utils/url-utils';
import * as portalUrlUtils from './lib/utils/portal-url-utils';
import * as portalUtils from './lib/utils/portal-utils';
import * as appConfigUtils from './lib/utils/app-config-utils';
import * as themeUtils from './lib/utils/theme-utils';
import * as keyboardUtils from './lib/utils/keyboard-utils';
import * as privilegeUtils from './lib/utils/privilege-utils';
import * as dataSourceUtils from './lib/utils/data-source-utils';
import * as extensionSpec from './lib/extension-spec/extension-spec';
import * as moduleLoader from './lib/module-loader';
import * as jimuHistory from './lib/browser-history';
import * as i18n from './lib/i18n';
import * as requestUtils from './lib/utils/request-utils';
import * as expressionUtils from './lib/utils/expression-utils';
import * as dateUtils from './lib/utils/date-utils';
import type { IntlShape } from 'react-intl';
import { FormattedDate, FormattedMessage, FormattedNumber, FormattedPlural, FormattedRelativeTime, FormattedTime, IntlProvider, injectIntl, createIntl, createIntlCache, useIntl } from 'react-intl';
import type { RepeatedDataSource } from './lib/repeat-data-source-context';
import { RepeatedDataSourceProvider, withRepeatedDataSource } from './lib/repeat-data-source-context';
import * as CONSTANTS from './lib/constants';
import BaseWidget from './lib/base-widget';
import WidgetManager from './lib/widget-manager';
import ConfigManager from './lib/config-manager';
import DataSourceManager from './lib/data-source-manager';
import MessageManager from './lib/message-manager';
import SessionManager, { SessionChangedReasonType } from './lib/session-manager';
import ExtensionManager from './lib/extension-manager';
import DataActionManager from './lib/data-action-manager';
import ThemeManager from './lib/theme-manager';
import ServiceManager from './lib/service-manager';
import AppRoot from './lib/app-root';
import defaultMessages from './lib/translations/default';
import MutableStoreManager from './lib/mutable-store-manager';
import type { DataSourceComponentProps } from './lib/data-source-component';
import DataSourceComponent from './lib/data-source-component';
import type { MultipleDataSourceComponentProps } from './lib/multiple-data-source-component';
import MultipleDataSourceComponent from './lib/multiple-data-source-component';
import type { MultipleExpressionResolveResults, SingleExpressionResolveResult } from './lib/expression-resolver-component';
import { ExpressionResolverComponent, ExpressionResolverErrorCode } from './lib/expression-resolver-component';
import Keyboard from './lib/keyboard';
import AppKeyboardComponent from './lib/app-keyboard-component';
declare const version: any;
declare const lodash: {
    assign: {
        <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
        <TObject_1, TSource1, TSource2>(object: TObject_1, source1: TSource1, source2: TSource2): TObject_1 & TSource1 & TSource2;
        <TObject_2, TSource1_1, TSource2_1, TSource3>(object: TObject_2, source1: TSource1_1, source2: TSource2_1, source3: TSource3): TObject_2 & TSource1_1 & TSource2_1 & TSource3;
        <TObject_3, TSource1_2, TSource2_2, TSource3_1, TSource4>(object: TObject_3, source1: TSource1_2, source2: TSource2_2, source3: TSource3_1, source4: TSource4): TObject_3 & TSource1_2 & TSource2_2 & TSource3_1 & TSource4;
        <TObject_4>(object: TObject_4): TObject_4;
        (object: any, ...otherArgs: any[]): any;
    };
    defer: (func: (...args: any[]) => any, ...args: any[]) => number;
    debounce: <T extends (...args: any) => any>(func: T, wait?: number, options?: import("lodash").DebounceSettings) => T & import("lodash").Cancelable;
    setValue: {
        <T_1 extends object>(object: T_1, path: import("lodash").Many<string | number | symbol>, value: any): T_1;
        <TResult>(object: object, path: import("lodash").Many<string | number | symbol>, value: any): TResult;
    };
    isDeepEqual: (value: any, other: any) => boolean;
    throttle: <T_2 extends (...args: any) => any>(func: T_2, wait?: number, options?: import("lodash").ThrottleSettings) => T_2 & import("lodash").Cancelable;
};
declare const esri: {
    restAuth: typeof restAuth;
    restFeatureLayer: typeof restFeatureLayer;
    restPortal: typeof restPortal;
    restRequest: typeof restRequest;
    Sanitizer: typeof Sanitizer;
};
declare const polished: {
    /**
     * https://github.com/styled-components/polished/issues/276
     * The typeing of polished is not correct. It says it's fixed but it seems it does not.
     */
    rgba: any;
    parseToRgb: any;
    rem: any;
    readableColor: any;
    lighten: any;
    darken: any;
    ellipsis: any;
    mix: any;
    stripUnit: any;
    math: any;
    borderRadius: any;
    getValueAndUnit: any;
};
declare type ImmutableObject<T> = Immutable.ImmutableObject<T>;
declare type ImmutableArray<T> = Immutable.ImmutableArray<T>;
declare const jsx: typeof React.createElement;
declare const css: typeof emotionCore.css;
declare const Global: typeof emotionCore.Global;
declare const ThemeContext: React.Context<object>;
export { AppRoot, React, ReactDOM, ExtensionManager, BaseWidget, WidgetManager, ConfigManager, DataSourceManager, urlUtils, SessionManager, SessionChangedReasonType, appActions, extensionSpec, utils, appConfigUtils, themeUtils, ReactRedux, MessageManager, Immutable, classNames, uuidv1, queryString, moduleLoader, jimuHistory, ImmutableObject, ImmutableArray, portalUrlUtils, portalUtils, i18n, defaultMessages, DataSourceComponent, DataSourceComponentProps, MultipleDataSourceComponent, MultipleDataSourceComponentProps, IntlProvider, injectIntl, jsx, css, Global, ThemeContext, SerializedStyles, styled, xss, polished, MutableStoreManager, Keyboard, AppKeyboardComponent, keyboardUtils, requestUtils, expressionUtils, dateUtils, createIntl, createIntlCache, useIntl, FormattedDate, FormattedMessage, FormattedNumber, FormattedPlural, FormattedRelativeTime, FormattedTime, IntlShape, esri, lodash, RepeatedDataSourceProvider, withRepeatedDataSource, RepeatedDataSource, dataSourceUtils, DataActionManager, ThemeManager, invariant, CONSTANTS, ReactResizeDetector, ResizeObserver, ExpressionResolverComponent, ExpressionResolverErrorCode, MultipleExpressionResolveResults, SingleExpressionResolveResult, ServiceManager, version, privilegeUtils, spring, ThemeProvider };
export * from './lib/types/layout';
export * from './lib/types/props';
export * from './lib/types/state';
export * from './lib/types/app-config';
export * from './lib/types/jimu-config';
export * from './lib/types/url-parameters';
export * from './lib/types/app-info';
export * from './lib/types/manifest';
export * from './lib/types/common';
export * from './lib/types/tracking-manager';
export * from './lib/types/theme';
export * from './lib/types/expression';
export * from './lib/types/sql-expression';
export * from './lib/types/service-definition';
export * from './lib/types/user-settings';
export * from './lib/data-sources/data-source-interface';
export * from './lib/message/message-base-types';
export * from './lib/init';
export * from './lib/store';
export * from './lib/tracking-manager';
export { LoadingHandler } from './lib/loading-component';
export * from './lib/dependency-loader';
export * from './lib/arcgis-js-api-module-loader';
export * from './lib/error-boundary';
export * from './lib/base-data-action';
export * from './lib/message-actions/filter-data-record-action';
export * from './lib/expression-resolver';
export * from './lib/version-manager';
export * from './lib/app-dialog';
export * from './lib/animation';
export * from './lib/transition';
